
counter.elf:     file format elf32-littlenios2
counter.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000029b8 memsz 0x000029b8 flags r-x
    LOAD off    0x000039d8 vaddr 0x000429d8 paddr 0x0004400c align 2**12
         filesz 0x00001634 memsz 0x00001634 flags rw-
    LOAD off    0x00005640 vaddr 0x00045640 paddr 0x00045640 align 2**12
         filesz 0x00000000 memsz 0x000002b0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000027f4  000401b4  000401b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000030  000429a8  000429a8  000039a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001634  000429d8  0004400c  000039d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002b0  00045640  00045640  00005640  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000005d8  00000000  00000000  00005030  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000899  00000000  00000000  00005608  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000a5c3  00000000  00000000  00005ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000278a  00000000  00000000  00010464  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006b09  00000000  00000000  00012bee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000009a4  00000000  00000000  000196f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000c4d  00000000  00000000  0001a09c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001068  00000000  00000000  0001ace9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0001bd54  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  0001bda8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001da7f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001da82  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001da85  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001da86  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001da87  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001da8b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001da8f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001da93  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001da9c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001daa5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0001daae  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000022  00000000  00000000  0001dab1  2**0
                  CONTENTS, READONLY
 29 .jdi          000041bd  00000000  00000000  0001dad3  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000319e2  00000000  00000000  00021c90  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b4 l    d  .text	00000000 .text
000429a8 l    d  .rodata	00000000 .rodata
000429d8 l    d  .rwdata	00000000 .rwdata
00045640 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000401ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 counter.c
00045640 l     O .bss	00000001 count
00000000 l    df *ABS*	00000000 alt_load.c
000402d4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000429d8 l     O .rwdata	00001060 jtag_uart
0004046c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000406ac l     F .text	00000228 altera_avalon_jtag_uart_irq
000408d4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00040f50 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00041400 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0004147c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004155c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00041980 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00041ad0 l     F .text	000000f8 alt_file_locked
00041d54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00043be0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0004260c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
000427c0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00042944 l     F .text	00000040 alt_sim_halt
00040340 g     F .text	0000006c alt_main
00045660 g     O .bss	00000100 alt_irq
0004400c g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004565c g     O .bss	00000004 errno
00045648 g     O .bss	00000004 alt_argv
0004bfe0 g       *ABS*	00000000 _gp
000403ac g     F .text	00000030 usleep
00043a60 g     O .rwdata	00000180 alt_fd_list
00041ff0 g     F .text	00000094 alt_find_dev
000423c4 g     F .text	000000a0 memcpy
00041a58 g     F .text	00000078 alt_io_redirect
000429a8 g       *ABS*	00000000 __DTOR_END__
00040aec g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000428fc g     F .text	00000008 __udivsi3
00042274 g     F .text	00000090 alt_icache_flush
00043ff0 g     O .rwdata	00000004 alt_max_fd
00044008 g     O .rwdata	00000004 _global_impure_ptr
000458f0 g       *ABS*	00000000 __bss_end
00041888 g     F .text	000000f8 alt_iic_isr_register
00041ec4 g     F .text	0000010c alt_tick
00041840 g     F .text	00000048 alt_ic_irq_enabled
00041e2c g     F .text	00000098 alt_alarm_stop
00045650 g     O .bss	00000004 alt_irq_active
00040000 g       *ABS*	00000000 __alt_mem_onchip_mem
000400ec g     F .exceptions	000000c8 alt_irq_handler
00043a38 g     O .rwdata	00000028 alt_dev_null
00041460 g     F .text	0000001c alt_dcache_flush_all
0004400c g       *ABS*	00000000 __ram_rwdata_end
00043fe8 g     O .rwdata	00000008 alt_dev_list
000429d8 g       *ABS*	00000000 __ram_rodata_end
00042904 g     F .text	00000008 __umodsi3
000458f0 g       *ABS*	00000000 end
000405ec g     F .text	000000c0 altera_avalon_jtag_uart_init
000429a4 g       *ABS*	00000000 __CTOR_LIST__
00080000 g       *ABS*	00000000 __alt_stack_pointer
00040fc0 g     F .text	00000090 alt_avalon_timer_sc_init
00040d10 g     F .text	00000240 altera_avalon_jtag_uart_write
00042610 g     F .text	000001b0 __call_exitprocs
000401b4 g     F .text	0000003c _start
00045654 g     O .bss	00000004 _alt_tick_rate
00045658 g     O .bss	00000004 _alt_nticks
00040410 g     F .text	0000005c alt_sys_init
000424d8 g     F .text	00000134 __register_exitproc
00040984 g     F .text	00000074 altera_avalon_jtag_uart_close
0004290c g     F .text	00000038 __mulsi3
000429d8 g       *ABS*	00000000 __ram_rwdata_start
000429a8 g       *ABS*	00000000 __ram_rodata_start
000404a4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
000421a4 g     F .text	000000d0 alt_get_fd
000411a4 g     F .text	0000015c alt_busy_sleep
00042350 g     F .text	00000074 memcmp
00040554 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000458f0 g       *ABS*	00000000 __alt_stack_base
0004059c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00042084 g     F .text	00000120 alt_find_file
000414a8 g     F .text	000000b4 alt_dev_llist_insert
00045640 g       *ABS*	00000000 __bss_start
000401f0 g     F .text	00000064 main
0004564c g     O .bss	00000004 alt_envp
000404fc g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00045760 g     O .bss	00000190 _atexit0
00043ff4 g     O .rwdata	00000004 alt_errno
0004283c g     F .text	00000060 __divsi3
000429a8 g       *ABS*	00000000 __CTOR_END__
000429a8 g       *ABS*	00000000 __flash_rodata_start
000429a8 g       *ABS*	00000000 __DTOR_LIST__
000403dc g     F .text	00000034 alt_irq_init
00041db4 g     F .text	00000078 alt_release_fd
00042304 g     F .text	00000014 atexit
00044004 g     O .rwdata	00000004 _impure_ptr
00045644 g     O .bss	00000004 alt_argc
00041620 g     F .text	00000064 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
00043fe0 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
000416b4 g     F .text	00000050 alt_ic_isr_register
0004400c g       *ABS*	00000000 _edata
000458f0 g       *ABS*	00000000 _end
000401b4 g       *ABS*	00000000 __ram_exceptions_end
000409f8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000417a0 g     F .text	000000a0 alt_ic_irq_disable
00041fd0 g     F .text	00000020 altera_nios2_qsys_irq_init
00042318 g     F .text	00000038 exit
0004289c g     F .text	00000060 __modsi3
00080000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00042984 g     F .text	00000020 _exit
00041050 g     F .text	00000154 alt_alarm_start
00042464 g     F .text	00000074 strlen
00041bc8 g     F .text	0000018c open
00041684 g     F .text	00000030 alt_icache_flush_all
00043ff8 g     O .rwdata	00000004 alt_priority_mask
00041704 g     F .text	0000009c alt_ic_irq_enable
00043ffc g     O .rwdata	00000008 alt_alarm_list
000415bc g     F .text	00000064 _do_ctors
00041300 g     F .text	00000100 close
00040254 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406d14 	ori	at,at,436
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_mem-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   40044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   400fc:	0005313a 	rdctl	r2,ipending
   40100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   40104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   40108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   4010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40110:	00800044 	movi	r2,1
   40114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40118:	e0ffff17 	ldw	r3,-4(fp)
   4011c:	e0bffe17 	ldw	r2,-8(fp)
   40120:	1884703a 	and	r2,r3,r2
   40124:	1005003a 	cmpeq	r2,r2,zero
   40128:	1000161e 	bne	r2,zero,40184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	e0bffd17 	ldw	r2,-12(fp)
   40130:	00c00134 	movhi	r3,4
   40134:	18d59804 	addi	r3,r3,22112
   40138:	100490fa 	slli	r2,r2,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	11400017 	ldw	r5,0(r2)
   40144:	e0bffd17 	ldw	r2,-12(fp)
   40148:	00c00134 	movhi	r3,4
   4014c:	18d59804 	addi	r3,r3,22112
   40150:	100490fa 	slli	r2,r2,3
   40154:	10c5883a 	add	r2,r2,r3
   40158:	10800104 	addi	r2,r2,4
   4015c:	11000017 	ldw	r4,0(r2)
   40160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40164:	0005313a 	rdctl	r2,ipending
   40168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   4016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	1004c03a 	cmpne	r2,r2,zero
   4017c:	103fe31e 	bne	r2,zero,4010c <alt_irq_handler+0x20>
   40180:	00000706 	br	401a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40184:	e0bffe17 	ldw	r2,-8(fp)
   40188:	1085883a 	add	r2,r2,r2
   4018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   40190:	e0bffd17 	ldw	r2,-12(fp)
   40194:	10800044 	addi	r2,r2,1
   40198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   4019c:	003fde06 	br	40118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a0:	e037883a 	mov	sp,fp
   401a4:	dfc00117 	ldw	ra,4(sp)
   401a8:	df000017 	ldw	fp,0(sp)
   401ac:	dec00204 	addi	sp,sp,8
   401b0:	f800283a 	ret

Disassembly of section .text:

000401b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401b4:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
   401b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   401bc:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   401c0:	d6aff814 	ori	gp,gp,49120
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401c4:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   401c8:	10959014 	ori	r2,r2,22080

    movhi r3, %hi(__bss_end)
   401cc:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   401d0:	18d63c14 	ori	r3,r3,22768

    beq r2, r3, 1f
   401d4:	10c00326 	beq	r2,r3,401e4 <_start+0x30>

0:
    stw zero, (r2)
   401d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401e0:	10fffd36 	bltu	r2,r3,401d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401e4:	00402540 	call	40254 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401e8:	00403400 	call	40340 <alt_main>

000401ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401ec:	003fff06 	br	401ec <alt_after_alt_main>

000401f0 <main>:
/* 8-bit "loop counter" variable. */
static uint8_t count;


int main(void)
{ 
   401f0:	defffe04 	addi	sp,sp,-8
   401f4:	dfc00115 	stw	ra,4(sp)
   401f8:	df000015 	stw	fp,0(sp)
   401fc:	d839883a 	mov	fp,sp
    count = 0;
   40200:	d0259805 	stb	zero,-27040(gp)

    /* 0x00-0xFF counting loop. */
    while( 1 ) 
    {
        usleep(100000); // Wait for about 0.1 seconds
   40204:	010000b4 	movhi	r4,2
   40208:	2121a804 	addi	r4,r4,-31072
   4020c:	00403ac0 	call	403ac <usleep>

        IOWR_8DIRECT(LED_BASE,OFFSET,count); // Write the value of "count" to the "led_out" PIO device
   40210:	d0a59803 	ldbu	r2,-27040(gp)
   40214:	10c03fcc 	andi	r3,r2,255
   40218:	00800234 	movhi	r2,8
   4021c:	10840804 	addi	r2,r2,4128
   40220:	10c00025 	stbio	r3,0(r2)

        if( count == 0xFF )
   40224:	d0a59803 	ldbu	r2,-27040(gp)
   40228:	10803fcc 	andi	r2,r2,255
   4022c:	10803fd8 	cmpnei	r2,r2,255
   40230:	1000041e 	bne	r2,zero,40244 <main+0x54>
        {
        	usleep(1000000); // If done counting, wait about 1 second...
   40234:	010003f4 	movhi	r4,15
   40238:	21109004 	addi	r4,r4,16960
   4023c:	00403ac0 	call	403ac <usleep>
        	count = 0;
   40240:	d0259805 	stb	zero,-27040(gp)
        }

        count++;
   40244:	d0a59803 	ldbu	r2,-27040(gp)
   40248:	10800044 	addi	r2,r2,1
   4024c:	d0a59805 	stb	r2,-27040(gp)
    }
   40250:	003fec06 	br	40204 <main+0x14>

00040254 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   40254:	defffe04 	addi	sp,sp,-8
   40258:	dfc00115 	stw	ra,4(sp)
   4025c:	df000015 	stw	fp,0(sp)
   40260:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   40264:	01000134 	movhi	r4,4
   40268:	21100304 	addi	r4,r4,16396
   4026c:	01400134 	movhi	r5,4
   40270:	294a7604 	addi	r5,r5,10712
   40274:	01800134 	movhi	r6,4
   40278:	31900304 	addi	r6,r6,16396
   4027c:	00402d40 	call	402d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   40280:	01000134 	movhi	r4,4
   40284:	21000804 	addi	r4,r4,32
   40288:	01400134 	movhi	r5,4
   4028c:	29400804 	addi	r5,r5,32
   40290:	01800134 	movhi	r6,4
   40294:	31806d04 	addi	r6,r6,436
   40298:	00402d40 	call	402d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4029c:	01000134 	movhi	r4,4
   402a0:	210a6a04 	addi	r4,r4,10664
   402a4:	01400134 	movhi	r5,4
   402a8:	294a6a04 	addi	r5,r5,10664
   402ac:	01800134 	movhi	r6,4
   402b0:	318a7604 	addi	r6,r6,10712
   402b4:	00402d40 	call	402d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   402b8:	00414600 	call	41460 <alt_dcache_flush_all>
  alt_icache_flush_all();
   402bc:	00416840 	call	41684 <alt_icache_flush_all>
}
   402c0:	e037883a 	mov	sp,fp
   402c4:	dfc00117 	ldw	ra,4(sp)
   402c8:	df000017 	ldw	fp,0(sp)
   402cc:	dec00204 	addi	sp,sp,8
   402d0:	f800283a 	ret

000402d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   402d4:	defffc04 	addi	sp,sp,-16
   402d8:	df000315 	stw	fp,12(sp)
   402dc:	df000304 	addi	fp,sp,12
   402e0:	e13ffd15 	stw	r4,-12(fp)
   402e4:	e17ffe15 	stw	r5,-8(fp)
   402e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   402ec:	e0fffe17 	ldw	r3,-8(fp)
   402f0:	e0bffd17 	ldw	r2,-12(fp)
   402f4:	18800e26 	beq	r3,r2,40330 <alt_load_section+0x5c>
  {
    while( to != end )
   402f8:	00000a06 	br	40324 <alt_load_section+0x50>
    {
      *to++ = *from++;
   402fc:	e0bffd17 	ldw	r2,-12(fp)
   40300:	10c00017 	ldw	r3,0(r2)
   40304:	e0bffe17 	ldw	r2,-8(fp)
   40308:	10c00015 	stw	r3,0(r2)
   4030c:	e0bffe17 	ldw	r2,-8(fp)
   40310:	10800104 	addi	r2,r2,4
   40314:	e0bffe15 	stw	r2,-8(fp)
   40318:	e0bffd17 	ldw	r2,-12(fp)
   4031c:	10800104 	addi	r2,r2,4
   40320:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   40324:	e0fffe17 	ldw	r3,-8(fp)
   40328:	e0bfff17 	ldw	r2,-4(fp)
   4032c:	18bff31e 	bne	r3,r2,402fc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   40330:	e037883a 	mov	sp,fp
   40334:	df000017 	ldw	fp,0(sp)
   40338:	dec00104 	addi	sp,sp,4
   4033c:	f800283a 	ret

00040340 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   40340:	defffd04 	addi	sp,sp,-12
   40344:	dfc00215 	stw	ra,8(sp)
   40348:	df000115 	stw	fp,4(sp)
   4034c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   40350:	0009883a 	mov	r4,zero
   40354:	00403dc0 	call	403dc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   40358:	00404100 	call	40410 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4035c:	01000134 	movhi	r4,4
   40360:	210a6a04 	addi	r4,r4,10664
   40364:	01400134 	movhi	r5,4
   40368:	294a6a04 	addi	r5,r5,10664
   4036c:	01800134 	movhi	r6,4
   40370:	318a6a04 	addi	r6,r6,10664
   40374:	0041a580 	call	41a58 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   40378:	00415bc0 	call	415bc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4037c:	01000134 	movhi	r4,4
   40380:	21058804 	addi	r4,r4,5664
   40384:	00423040 	call	42304 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   40388:	d1259917 	ldw	r4,-27036(gp)
   4038c:	d1659a17 	ldw	r5,-27032(gp)
   40390:	d1a59b17 	ldw	r6,-27028(gp)
   40394:	00401f00 	call	401f0 <main>
   40398:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4039c:	01000044 	movi	r4,1
   403a0:	00413000 	call	41300 <close>
  exit (result);
   403a4:	e13fff17 	ldw	r4,-4(fp)
   403a8:	00423180 	call	42318 <exit>

000403ac <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   403ac:	defffd04 	addi	sp,sp,-12
   403b0:	dfc00215 	stw	ra,8(sp)
   403b4:	df000115 	stw	fp,4(sp)
   403b8:	df000104 	addi	fp,sp,4
   403bc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   403c0:	e13fff17 	ldw	r4,-4(fp)
   403c4:	00411a40 	call	411a4 <alt_busy_sleep>
}
   403c8:	e037883a 	mov	sp,fp
   403cc:	dfc00117 	ldw	ra,4(sp)
   403d0:	df000017 	ldw	fp,0(sp)
   403d4:	dec00204 	addi	sp,sp,8
   403d8:	f800283a 	ret

000403dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   403dc:	defffd04 	addi	sp,sp,-12
   403e0:	dfc00215 	stw	ra,8(sp)
   403e4:	df000115 	stw	fp,4(sp)
   403e8:	df000104 	addi	fp,sp,4
   403ec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   403f0:	0041fd00 	call	41fd0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   403f4:	00800044 	movi	r2,1
   403f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   403fc:	e037883a 	mov	sp,fp
   40400:	dfc00117 	ldw	ra,4(sp)
   40404:	df000017 	ldw	fp,0(sp)
   40408:	dec00204 	addi	sp,sp,8
   4040c:	f800283a 	ret

00040410 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   40410:	defffe04 	addi	sp,sp,-8
   40414:	dfc00115 	stw	ra,4(sp)
   40418:	df000015 	stw	fp,0(sp)
   4041c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   40420:	01000234 	movhi	r4,8
   40424:	21040004 	addi	r4,r4,4096
   40428:	000b883a 	mov	r5,zero
   4042c:	01800044 	movi	r6,1
   40430:	01c0fa04 	movi	r7,1000
   40434:	0040fc00 	call	40fc0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   40438:	01000134 	movhi	r4,4
   4043c:	210a8004 	addi	r4,r4,10752
   40440:	000b883a 	mov	r5,zero
   40444:	01800404 	movi	r6,16
   40448:	00405ec0 	call	405ec <altera_avalon_jtag_uart_init>
   4044c:	01000134 	movhi	r4,4
   40450:	210a7604 	addi	r4,r4,10712
   40454:	004046c0 	call	4046c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   40458:	e037883a 	mov	sp,fp
   4045c:	dfc00117 	ldw	ra,4(sp)
   40460:	df000017 	ldw	fp,0(sp)
   40464:	dec00204 	addi	sp,sp,8
   40468:	f800283a 	ret

0004046c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4046c:	defffd04 	addi	sp,sp,-12
   40470:	dfc00215 	stw	ra,8(sp)
   40474:	df000115 	stw	fp,4(sp)
   40478:	df000104 	addi	fp,sp,4
   4047c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   40480:	e13fff17 	ldw	r4,-4(fp)
   40484:	01400134 	movhi	r5,4
   40488:	294ffa04 	addi	r5,r5,16360
   4048c:	00414a80 	call	414a8 <alt_dev_llist_insert>
}
   40490:	e037883a 	mov	sp,fp
   40494:	dfc00117 	ldw	ra,4(sp)
   40498:	df000017 	ldw	fp,0(sp)
   4049c:	dec00204 	addi	sp,sp,8
   404a0:	f800283a 	ret

000404a4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   404a4:	defffa04 	addi	sp,sp,-24
   404a8:	dfc00515 	stw	ra,20(sp)
   404ac:	df000415 	stw	fp,16(sp)
   404b0:	df000404 	addi	fp,sp,16
   404b4:	e13ffd15 	stw	r4,-12(fp)
   404b8:	e17ffe15 	stw	r5,-8(fp)
   404bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   404c0:	e0bffd17 	ldw	r2,-12(fp)
   404c4:	10800017 	ldw	r2,0(r2)
   404c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   404cc:	e0bffc17 	ldw	r2,-16(fp)
   404d0:	11000a04 	addi	r4,r2,40
   404d4:	e0bffd17 	ldw	r2,-12(fp)
   404d8:	11c00217 	ldw	r7,8(r2)
   404dc:	e17ffe17 	ldw	r5,-8(fp)
   404e0:	e1bfff17 	ldw	r6,-4(fp)
   404e4:	0040aec0 	call	40aec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   404e8:	e037883a 	mov	sp,fp
   404ec:	dfc00117 	ldw	ra,4(sp)
   404f0:	df000017 	ldw	fp,0(sp)
   404f4:	dec00204 	addi	sp,sp,8
   404f8:	f800283a 	ret

000404fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   404fc:	defffa04 	addi	sp,sp,-24
   40500:	dfc00515 	stw	ra,20(sp)
   40504:	df000415 	stw	fp,16(sp)
   40508:	df000404 	addi	fp,sp,16
   4050c:	e13ffd15 	stw	r4,-12(fp)
   40510:	e17ffe15 	stw	r5,-8(fp)
   40514:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   40518:	e0bffd17 	ldw	r2,-12(fp)
   4051c:	10800017 	ldw	r2,0(r2)
   40520:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   40524:	e0bffc17 	ldw	r2,-16(fp)
   40528:	11000a04 	addi	r4,r2,40
   4052c:	e0bffd17 	ldw	r2,-12(fp)
   40530:	11c00217 	ldw	r7,8(r2)
   40534:	e17ffe17 	ldw	r5,-8(fp)
   40538:	e1bfff17 	ldw	r6,-4(fp)
   4053c:	0040d100 	call	40d10 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   40540:	e037883a 	mov	sp,fp
   40544:	dfc00117 	ldw	ra,4(sp)
   40548:	df000017 	ldw	fp,0(sp)
   4054c:	dec00204 	addi	sp,sp,8
   40550:	f800283a 	ret

00040554 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   40554:	defffc04 	addi	sp,sp,-16
   40558:	dfc00315 	stw	ra,12(sp)
   4055c:	df000215 	stw	fp,8(sp)
   40560:	df000204 	addi	fp,sp,8
   40564:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   40568:	e0bfff17 	ldw	r2,-4(fp)
   4056c:	10800017 	ldw	r2,0(r2)
   40570:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   40574:	e0bffe17 	ldw	r2,-8(fp)
   40578:	11000a04 	addi	r4,r2,40
   4057c:	e0bfff17 	ldw	r2,-4(fp)
   40580:	11400217 	ldw	r5,8(r2)
   40584:	00409840 	call	40984 <altera_avalon_jtag_uart_close>
}
   40588:	e037883a 	mov	sp,fp
   4058c:	dfc00117 	ldw	ra,4(sp)
   40590:	df000017 	ldw	fp,0(sp)
   40594:	dec00204 	addi	sp,sp,8
   40598:	f800283a 	ret

0004059c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4059c:	defffa04 	addi	sp,sp,-24
   405a0:	dfc00515 	stw	ra,20(sp)
   405a4:	df000415 	stw	fp,16(sp)
   405a8:	df000404 	addi	fp,sp,16
   405ac:	e13ffd15 	stw	r4,-12(fp)
   405b0:	e17ffe15 	stw	r5,-8(fp)
   405b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   405b8:	e0bffd17 	ldw	r2,-12(fp)
   405bc:	10800017 	ldw	r2,0(r2)
   405c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   405c4:	e0bffc17 	ldw	r2,-16(fp)
   405c8:	11000a04 	addi	r4,r2,40
   405cc:	e17ffe17 	ldw	r5,-8(fp)
   405d0:	e1bfff17 	ldw	r6,-4(fp)
   405d4:	00409f80 	call	409f8 <altera_avalon_jtag_uart_ioctl>
}
   405d8:	e037883a 	mov	sp,fp
   405dc:	dfc00117 	ldw	ra,4(sp)
   405e0:	df000017 	ldw	fp,0(sp)
   405e4:	dec00204 	addi	sp,sp,8
   405e8:	f800283a 	ret

000405ec <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   405ec:	defffa04 	addi	sp,sp,-24
   405f0:	dfc00515 	stw	ra,20(sp)
   405f4:	df000415 	stw	fp,16(sp)
   405f8:	df000404 	addi	fp,sp,16
   405fc:	e13ffd15 	stw	r4,-12(fp)
   40600:	e17ffe15 	stw	r5,-8(fp)
   40604:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   40608:	e0fffd17 	ldw	r3,-12(fp)
   4060c:	00800044 	movi	r2,1
   40610:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   40614:	e0bffd17 	ldw	r2,-12(fp)
   40618:	10800017 	ldw	r2,0(r2)
   4061c:	11000104 	addi	r4,r2,4
   40620:	e0bffd17 	ldw	r2,-12(fp)
   40624:	10800817 	ldw	r2,32(r2)
   40628:	1007883a 	mov	r3,r2
   4062c:	2005883a 	mov	r2,r4
   40630:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   40634:	e13ffe17 	ldw	r4,-8(fp)
   40638:	e17fff17 	ldw	r5,-4(fp)
   4063c:	d8000015 	stw	zero,0(sp)
   40640:	01800134 	movhi	r6,4
   40644:	3181ab04 	addi	r6,r6,1708
   40648:	e1fffd17 	ldw	r7,-12(fp)
   4064c:	00416b40 	call	416b4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   40650:	e0bffd17 	ldw	r2,-12(fp)
   40654:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   40658:	e0bffd17 	ldw	r2,-12(fp)
   4065c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   40660:	00800134 	movhi	r2,4
   40664:	10959504 	addi	r2,r2,22100
   40668:	10800017 	ldw	r2,0(r2)
   4066c:	100b883a 	mov	r5,r2
   40670:	01800134 	movhi	r6,4
   40674:	31823504 	addi	r6,r6,2260
   40678:	e1fffd17 	ldw	r7,-12(fp)
   4067c:	00410500 	call	41050 <alt_alarm_start>
   40680:	1004403a 	cmpge	r2,r2,zero
   40684:	1000041e 	bne	r2,zero,40698 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   40688:	e0fffd17 	ldw	r3,-12(fp)
   4068c:	00a00034 	movhi	r2,32768
   40690:	10bfffc4 	addi	r2,r2,-1
   40694:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   40698:	e037883a 	mov	sp,fp
   4069c:	dfc00117 	ldw	ra,4(sp)
   406a0:	df000017 	ldw	fp,0(sp)
   406a4:	dec00204 	addi	sp,sp,8
   406a8:	f800283a 	ret

000406ac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   406ac:	defff804 	addi	sp,sp,-32
   406b0:	df000715 	stw	fp,28(sp)
   406b4:	df000704 	addi	fp,sp,28
   406b8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   406bc:	e0bfff17 	ldw	r2,-4(fp)
   406c0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   406c4:	e0bffe17 	ldw	r2,-8(fp)
   406c8:	10800017 	ldw	r2,0(r2)
   406cc:	e0bffd15 	stw	r2,-12(fp)
   406d0:	00000006 	br	406d4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   406d4:	e0bffd17 	ldw	r2,-12(fp)
   406d8:	10800104 	addi	r2,r2,4
   406dc:	10800037 	ldwio	r2,0(r2)
   406e0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   406e4:	e0bffc17 	ldw	r2,-16(fp)
   406e8:	1080c00c 	andi	r2,r2,768
   406ec:	1005003a 	cmpeq	r2,r2,zero
   406f0:	1000741e 	bne	r2,zero,408c4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   406f4:	e0bffc17 	ldw	r2,-16(fp)
   406f8:	1080400c 	andi	r2,r2,256
   406fc:	1005003a 	cmpeq	r2,r2,zero
   40700:	1000351e 	bne	r2,zero,407d8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   40704:	00800074 	movhi	r2,1
   40708:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4070c:	e0bffe17 	ldw	r2,-8(fp)
   40710:	10800a17 	ldw	r2,40(r2)
   40714:	10800044 	addi	r2,r2,1
   40718:	1081ffcc 	andi	r2,r2,2047
   4071c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   40720:	e0bffe17 	ldw	r2,-8(fp)
   40724:	10c00b17 	ldw	r3,44(r2)
   40728:	e0bffa17 	ldw	r2,-24(fp)
   4072c:	18801626 	beq	r3,r2,40788 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   40730:	e0bffd17 	ldw	r2,-12(fp)
   40734:	10800037 	ldwio	r2,0(r2)
   40738:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4073c:	e0bffb17 	ldw	r2,-20(fp)
   40740:	10a0000c 	andi	r2,r2,32768
   40744:	1005003a 	cmpeq	r2,r2,zero
   40748:	10000f1e 	bne	r2,zero,40788 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4074c:	e0bffe17 	ldw	r2,-8(fp)
   40750:	10c00a17 	ldw	r3,40(r2)
   40754:	e0bffb17 	ldw	r2,-20(fp)
   40758:	1009883a 	mov	r4,r2
   4075c:	e0bffe17 	ldw	r2,-8(fp)
   40760:	1885883a 	add	r2,r3,r2
   40764:	10800e04 	addi	r2,r2,56
   40768:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4076c:	e0bffe17 	ldw	r2,-8(fp)
   40770:	10800a17 	ldw	r2,40(r2)
   40774:	10800044 	addi	r2,r2,1
   40778:	10c1ffcc 	andi	r3,r2,2047
   4077c:	e0bffe17 	ldw	r2,-8(fp)
   40780:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   40784:	003fe106 	br	4070c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   40788:	e0bffb17 	ldw	r2,-20(fp)
   4078c:	10bfffec 	andhi	r2,r2,65535
   40790:	1005003a 	cmpeq	r2,r2,zero
   40794:	1000101e 	bne	r2,zero,407d8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   40798:	e0bffe17 	ldw	r2,-8(fp)
   4079c:	10c00817 	ldw	r3,32(r2)
   407a0:	00bfff84 	movi	r2,-2
   407a4:	1886703a 	and	r3,r3,r2
   407a8:	e0bffe17 	ldw	r2,-8(fp)
   407ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   407b0:	e0bffd17 	ldw	r2,-12(fp)
   407b4:	11000104 	addi	r4,r2,4
   407b8:	e0bffe17 	ldw	r2,-8(fp)
   407bc:	10800817 	ldw	r2,32(r2)
   407c0:	1007883a 	mov	r3,r2
   407c4:	2005883a 	mov	r2,r4
   407c8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   407cc:	e0bffd17 	ldw	r2,-12(fp)
   407d0:	10800104 	addi	r2,r2,4
   407d4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   407d8:	e0bffc17 	ldw	r2,-16(fp)
   407dc:	1080800c 	andi	r2,r2,512
   407e0:	1005003a 	cmpeq	r2,r2,zero
   407e4:	103fbb1e 	bne	r2,zero,406d4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   407e8:	e0bffc17 	ldw	r2,-16(fp)
   407ec:	10bfffec 	andhi	r2,r2,65535
   407f0:	1004d43a 	srli	r2,r2,16
   407f4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   407f8:	00001506 	br	40850 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   407fc:	e13ffd17 	ldw	r4,-12(fp)
   40800:	e0bffe17 	ldw	r2,-8(fp)
   40804:	10c00d17 	ldw	r3,52(r2)
   40808:	e0bffe17 	ldw	r2,-8(fp)
   4080c:	1885883a 	add	r2,r3,r2
   40810:	10820e04 	addi	r2,r2,2104
   40814:	10800003 	ldbu	r2,0(r2)
   40818:	10c03fcc 	andi	r3,r2,255
   4081c:	18c0201c 	xori	r3,r3,128
   40820:	18ffe004 	addi	r3,r3,-128
   40824:	2005883a 	mov	r2,r4
   40828:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4082c:	e0bffe17 	ldw	r2,-8(fp)
   40830:	10800d17 	ldw	r2,52(r2)
   40834:	10800044 	addi	r2,r2,1
   40838:	10c1ffcc 	andi	r3,r2,2047
   4083c:	e0bffe17 	ldw	r2,-8(fp)
   40840:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   40844:	e0bff917 	ldw	r2,-28(fp)
   40848:	10bfffc4 	addi	r2,r2,-1
   4084c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   40850:	e0bff917 	ldw	r2,-28(fp)
   40854:	1005003a 	cmpeq	r2,r2,zero
   40858:	1000051e 	bne	r2,zero,40870 <altera_avalon_jtag_uart_irq+0x1c4>
   4085c:	e0bffe17 	ldw	r2,-8(fp)
   40860:	10c00d17 	ldw	r3,52(r2)
   40864:	e0bffe17 	ldw	r2,-8(fp)
   40868:	10800c17 	ldw	r2,48(r2)
   4086c:	18bfe31e 	bne	r3,r2,407fc <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   40870:	e0bff917 	ldw	r2,-28(fp)
   40874:	1005003a 	cmpeq	r2,r2,zero
   40878:	103f961e 	bne	r2,zero,406d4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4087c:	e0bffe17 	ldw	r2,-8(fp)
   40880:	10c00817 	ldw	r3,32(r2)
   40884:	00bfff44 	movi	r2,-3
   40888:	1886703a 	and	r3,r3,r2
   4088c:	e0bffe17 	ldw	r2,-8(fp)
   40890:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   40894:	e0bffe17 	ldw	r2,-8(fp)
   40898:	10800017 	ldw	r2,0(r2)
   4089c:	11000104 	addi	r4,r2,4
   408a0:	e0bffe17 	ldw	r2,-8(fp)
   408a4:	10800817 	ldw	r2,32(r2)
   408a8:	1007883a 	mov	r3,r2
   408ac:	2005883a 	mov	r2,r4
   408b0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   408b4:	e0bffd17 	ldw	r2,-12(fp)
   408b8:	10800104 	addi	r2,r2,4
   408bc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   408c0:	003f8406 	br	406d4 <altera_avalon_jtag_uart_irq+0x28>
}
   408c4:	e037883a 	mov	sp,fp
   408c8:	df000017 	ldw	fp,0(sp)
   408cc:	dec00104 	addi	sp,sp,4
   408d0:	f800283a 	ret

000408d4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   408d4:	defffc04 	addi	sp,sp,-16
   408d8:	df000315 	stw	fp,12(sp)
   408dc:	df000304 	addi	fp,sp,12
   408e0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   408e4:	e0bfff17 	ldw	r2,-4(fp)
   408e8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   408ec:	e0bffe17 	ldw	r2,-8(fp)
   408f0:	10800017 	ldw	r2,0(r2)
   408f4:	10800104 	addi	r2,r2,4
   408f8:	10800037 	ldwio	r2,0(r2)
   408fc:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   40900:	e0bffd17 	ldw	r2,-12(fp)
   40904:	1081000c 	andi	r2,r2,1024
   40908:	1005003a 	cmpeq	r2,r2,zero
   4090c:	10000c1e 	bne	r2,zero,40940 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   40910:	e0bffe17 	ldw	r2,-8(fp)
   40914:	10800017 	ldw	r2,0(r2)
   40918:	11000104 	addi	r4,r2,4
   4091c:	e0bffe17 	ldw	r2,-8(fp)
   40920:	10800817 	ldw	r2,32(r2)
   40924:	10810014 	ori	r2,r2,1024
   40928:	1007883a 	mov	r3,r2
   4092c:	2005883a 	mov	r2,r4
   40930:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   40934:	e0bffe17 	ldw	r2,-8(fp)
   40938:	10000915 	stw	zero,36(r2)
   4093c:	00000a06 	br	40968 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   40940:	e0bffe17 	ldw	r2,-8(fp)
   40944:	10c00917 	ldw	r3,36(r2)
   40948:	00a00034 	movhi	r2,32768
   4094c:	10bfff04 	addi	r2,r2,-4
   40950:	10c00536 	bltu	r2,r3,40968 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   40954:	e0bffe17 	ldw	r2,-8(fp)
   40958:	10800917 	ldw	r2,36(r2)
   4095c:	10c00044 	addi	r3,r2,1
   40960:	e0bffe17 	ldw	r2,-8(fp)
   40964:	10c00915 	stw	r3,36(r2)
   40968:	00800134 	movhi	r2,4
   4096c:	10959504 	addi	r2,r2,22100
   40970:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   40974:	e037883a 	mov	sp,fp
   40978:	df000017 	ldw	fp,0(sp)
   4097c:	dec00104 	addi	sp,sp,4
   40980:	f800283a 	ret

00040984 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   40984:	defffc04 	addi	sp,sp,-16
   40988:	df000315 	stw	fp,12(sp)
   4098c:	df000304 	addi	fp,sp,12
   40990:	e13ffd15 	stw	r4,-12(fp)
   40994:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   40998:	00000706 	br	409b8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   4099c:	e0bffe17 	ldw	r2,-8(fp)
   409a0:	1090000c 	andi	r2,r2,16384
   409a4:	1005003a 	cmpeq	r2,r2,zero
   409a8:	1000031e 	bne	r2,zero,409b8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   409ac:	00bffd44 	movi	r2,-11
   409b0:	e0bfff15 	stw	r2,-4(fp)
   409b4:	00000b06 	br	409e4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   409b8:	e0bffd17 	ldw	r2,-12(fp)
   409bc:	10c00d17 	ldw	r3,52(r2)
   409c0:	e0bffd17 	ldw	r2,-12(fp)
   409c4:	10800c17 	ldw	r2,48(r2)
   409c8:	18800526 	beq	r3,r2,409e0 <altera_avalon_jtag_uart_close+0x5c>
   409cc:	e0bffd17 	ldw	r2,-12(fp)
   409d0:	10c00917 	ldw	r3,36(r2)
   409d4:	e0bffd17 	ldw	r2,-12(fp)
   409d8:	10800117 	ldw	r2,4(r2)
   409dc:	18bfef36 	bltu	r3,r2,4099c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   409e0:	e03fff15 	stw	zero,-4(fp)
   409e4:	e0bfff17 	ldw	r2,-4(fp)
}
   409e8:	e037883a 	mov	sp,fp
   409ec:	df000017 	ldw	fp,0(sp)
   409f0:	dec00104 	addi	sp,sp,4
   409f4:	f800283a 	ret

000409f8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   409f8:	defff804 	addi	sp,sp,-32
   409fc:	df000715 	stw	fp,28(sp)
   40a00:	df000704 	addi	fp,sp,28
   40a04:	e13ffb15 	stw	r4,-20(fp)
   40a08:	e17ffc15 	stw	r5,-16(fp)
   40a0c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   40a10:	00bff9c4 	movi	r2,-25
   40a14:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   40a18:	e0bffc17 	ldw	r2,-16(fp)
   40a1c:	e0bfff15 	stw	r2,-4(fp)
   40a20:	e0ffff17 	ldw	r3,-4(fp)
   40a24:	189a8060 	cmpeqi	r2,r3,27137
   40a28:	1000041e 	bne	r2,zero,40a3c <altera_avalon_jtag_uart_ioctl+0x44>
   40a2c:	e0ffff17 	ldw	r3,-4(fp)
   40a30:	189a80a0 	cmpeqi	r2,r3,27138
   40a34:	10001b1e 	bne	r2,zero,40aa4 <altera_avalon_jtag_uart_ioctl+0xac>
   40a38:	00002706 	br	40ad8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   40a3c:	e0bffb17 	ldw	r2,-20(fp)
   40a40:	10c00117 	ldw	r3,4(r2)
   40a44:	00a00034 	movhi	r2,32768
   40a48:	10bfffc4 	addi	r2,r2,-1
   40a4c:	18802226 	beq	r3,r2,40ad8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   40a50:	e0bffd17 	ldw	r2,-12(fp)
   40a54:	10800017 	ldw	r2,0(r2)
   40a58:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   40a5c:	e0bff917 	ldw	r2,-28(fp)
   40a60:	10800090 	cmplti	r2,r2,2
   40a64:	1000071e 	bne	r2,zero,40a84 <altera_avalon_jtag_uart_ioctl+0x8c>
   40a68:	e0fff917 	ldw	r3,-28(fp)
   40a6c:	00a00034 	movhi	r2,32768
   40a70:	10bfffc4 	addi	r2,r2,-1
   40a74:	18800326 	beq	r3,r2,40a84 <altera_avalon_jtag_uart_ioctl+0x8c>
   40a78:	e0bff917 	ldw	r2,-28(fp)
   40a7c:	e0bffe15 	stw	r2,-8(fp)
   40a80:	00000306 	br	40a90 <altera_avalon_jtag_uart_ioctl+0x98>
   40a84:	00e00034 	movhi	r3,32768
   40a88:	18ffff84 	addi	r3,r3,-2
   40a8c:	e0fffe15 	stw	r3,-8(fp)
   40a90:	e0bffb17 	ldw	r2,-20(fp)
   40a94:	e0fffe17 	ldw	r3,-8(fp)
   40a98:	10c00115 	stw	r3,4(r2)
      rc = 0;
   40a9c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   40aa0:	00000d06 	br	40ad8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   40aa4:	e0bffb17 	ldw	r2,-20(fp)
   40aa8:	10c00117 	ldw	r3,4(r2)
   40aac:	00a00034 	movhi	r2,32768
   40ab0:	10bfffc4 	addi	r2,r2,-1
   40ab4:	18800826 	beq	r3,r2,40ad8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   40ab8:	e13ffd17 	ldw	r4,-12(fp)
   40abc:	e0bffb17 	ldw	r2,-20(fp)
   40ac0:	10c00917 	ldw	r3,36(r2)
   40ac4:	e0bffb17 	ldw	r2,-20(fp)
   40ac8:	10800117 	ldw	r2,4(r2)
   40acc:	1885803a 	cmpltu	r2,r3,r2
   40ad0:	20800015 	stw	r2,0(r4)
      rc = 0;
   40ad4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   40ad8:	e0bffa17 	ldw	r2,-24(fp)
}
   40adc:	e037883a 	mov	sp,fp
   40ae0:	df000017 	ldw	fp,0(sp)
   40ae4:	dec00104 	addi	sp,sp,4
   40ae8:	f800283a 	ret

00040aec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   40aec:	defff204 	addi	sp,sp,-56
   40af0:	dfc00d15 	stw	ra,52(sp)
   40af4:	df000c15 	stw	fp,48(sp)
   40af8:	df000c04 	addi	fp,sp,48
   40afc:	e13ffb15 	stw	r4,-20(fp)
   40b00:	e17ffc15 	stw	r5,-16(fp)
   40b04:	e1bffd15 	stw	r6,-12(fp)
   40b08:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   40b0c:	e0bffc17 	ldw	r2,-16(fp)
   40b10:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   40b14:	00004806 	br	40c38 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   40b18:	e0bffb17 	ldw	r2,-20(fp)
   40b1c:	10800a17 	ldw	r2,40(r2)
   40b20:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   40b24:	e0bffb17 	ldw	r2,-20(fp)
   40b28:	10800b17 	ldw	r2,44(r2)
   40b2c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   40b30:	e0fff717 	ldw	r3,-36(fp)
   40b34:	e0bff617 	ldw	r2,-40(fp)
   40b38:	18800536 	bltu	r3,r2,40b50 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   40b3c:	e0bff717 	ldw	r2,-36(fp)
   40b40:	e0fff617 	ldw	r3,-40(fp)
   40b44:	10c5c83a 	sub	r2,r2,r3
   40b48:	e0bff815 	stw	r2,-32(fp)
   40b4c:	00000406 	br	40b60 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   40b50:	00820004 	movi	r2,2048
   40b54:	e0fff617 	ldw	r3,-40(fp)
   40b58:	10c5c83a 	sub	r2,r2,r3
   40b5c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   40b60:	e0bff817 	ldw	r2,-32(fp)
   40b64:	1005003a 	cmpeq	r2,r2,zero
   40b68:	10001f1e 	bne	r2,zero,40be8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   40b6c:	e0fffd17 	ldw	r3,-12(fp)
   40b70:	e0bff817 	ldw	r2,-32(fp)
   40b74:	1880022e 	bgeu	r3,r2,40b80 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   40b78:	e0bffd17 	ldw	r2,-12(fp)
   40b7c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   40b80:	e0bffb17 	ldw	r2,-20(fp)
   40b84:	10c00e04 	addi	r3,r2,56
   40b88:	e0bff617 	ldw	r2,-40(fp)
   40b8c:	1887883a 	add	r3,r3,r2
   40b90:	e0bffa17 	ldw	r2,-24(fp)
   40b94:	1009883a 	mov	r4,r2
   40b98:	180b883a 	mov	r5,r3
   40b9c:	e1bff817 	ldw	r6,-32(fp)
   40ba0:	00423c40 	call	423c4 <memcpy>
      ptr   += n;
   40ba4:	e0fff817 	ldw	r3,-32(fp)
   40ba8:	e0bffa17 	ldw	r2,-24(fp)
   40bac:	10c5883a 	add	r2,r2,r3
   40bb0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   40bb4:	e0fffd17 	ldw	r3,-12(fp)
   40bb8:	e0bff817 	ldw	r2,-32(fp)
   40bbc:	1885c83a 	sub	r2,r3,r2
   40bc0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40bc4:	e0fff617 	ldw	r3,-40(fp)
   40bc8:	e0bff817 	ldw	r2,-32(fp)
   40bcc:	1885883a 	add	r2,r3,r2
   40bd0:	10c1ffcc 	andi	r3,r2,2047
   40bd4:	e0bffb17 	ldw	r2,-20(fp)
   40bd8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   40bdc:	e0bffd17 	ldw	r2,-12(fp)
   40be0:	10800048 	cmpgei	r2,r2,1
   40be4:	103fcc1e 	bne	r2,zero,40b18 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   40be8:	e0fffa17 	ldw	r3,-24(fp)
   40bec:	e0bffc17 	ldw	r2,-16(fp)
   40bf0:	1880141e 	bne	r3,r2,40c44 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   40bf4:	e0bffe17 	ldw	r2,-8(fp)
   40bf8:	1090000c 	andi	r2,r2,16384
   40bfc:	1004c03a 	cmpne	r2,r2,zero
   40c00:	1000101e 	bne	r2,zero,40c44 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   40c04:	e0bffb17 	ldw	r2,-20(fp)
   40c08:	10c00a17 	ldw	r3,40(r2)
   40c0c:	e0bff717 	ldw	r2,-36(fp)
   40c10:	1880051e 	bne	r3,r2,40c28 <altera_avalon_jtag_uart_read+0x13c>
   40c14:	e0bffb17 	ldw	r2,-20(fp)
   40c18:	10c00917 	ldw	r3,36(r2)
   40c1c:	e0bffb17 	ldw	r2,-20(fp)
   40c20:	10800117 	ldw	r2,4(r2)
   40c24:	18bff736 	bltu	r3,r2,40c04 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   40c28:	e0bffb17 	ldw	r2,-20(fp)
   40c2c:	10c00a17 	ldw	r3,40(r2)
   40c30:	e0bff717 	ldw	r2,-36(fp)
   40c34:	18800326 	beq	r3,r2,40c44 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   40c38:	e0bffd17 	ldw	r2,-12(fp)
   40c3c:	10800048 	cmpgei	r2,r2,1
   40c40:	103fb51e 	bne	r2,zero,40b18 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   40c44:	e0fffa17 	ldw	r3,-24(fp)
   40c48:	e0bffc17 	ldw	r2,-16(fp)
   40c4c:	18801926 	beq	r3,r2,40cb4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   40c50:	0005303a 	rdctl	r2,status
   40c54:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   40c58:	e0fff517 	ldw	r3,-44(fp)
   40c5c:	00bfff84 	movi	r2,-2
   40c60:	1884703a 	and	r2,r3,r2
   40c64:	1001703a 	wrctl	status,r2
  
  return context;
   40c68:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   40c6c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   40c70:	e0bffb17 	ldw	r2,-20(fp)
   40c74:	10800817 	ldw	r2,32(r2)
   40c78:	10c00054 	ori	r3,r2,1
   40c7c:	e0bffb17 	ldw	r2,-20(fp)
   40c80:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   40c84:	e0bffb17 	ldw	r2,-20(fp)
   40c88:	10800017 	ldw	r2,0(r2)
   40c8c:	11000104 	addi	r4,r2,4
   40c90:	e0bffb17 	ldw	r2,-20(fp)
   40c94:	10800817 	ldw	r2,32(r2)
   40c98:	1007883a 	mov	r3,r2
   40c9c:	2005883a 	mov	r2,r4
   40ca0:	10c00035 	stwio	r3,0(r2)
   40ca4:	e0bff917 	ldw	r2,-28(fp)
   40ca8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   40cac:	e0bff417 	ldw	r2,-48(fp)
   40cb0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   40cb4:	e0fffa17 	ldw	r3,-24(fp)
   40cb8:	e0bffc17 	ldw	r2,-16(fp)
   40cbc:	18800526 	beq	r3,r2,40cd4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   40cc0:	e0fffa17 	ldw	r3,-24(fp)
   40cc4:	e0bffc17 	ldw	r2,-16(fp)
   40cc8:	1887c83a 	sub	r3,r3,r2
   40ccc:	e0ffff15 	stw	r3,-4(fp)
   40cd0:	00000906 	br	40cf8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   40cd4:	e0bffe17 	ldw	r2,-8(fp)
   40cd8:	1090000c 	andi	r2,r2,16384
   40cdc:	1005003a 	cmpeq	r2,r2,zero
   40ce0:	1000031e 	bne	r2,zero,40cf0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   40ce4:	00bffd44 	movi	r2,-11
   40ce8:	e0bfff15 	stw	r2,-4(fp)
   40cec:	00000206 	br	40cf8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   40cf0:	00bffec4 	movi	r2,-5
   40cf4:	e0bfff15 	stw	r2,-4(fp)
   40cf8:	e0bfff17 	ldw	r2,-4(fp)
}
   40cfc:	e037883a 	mov	sp,fp
   40d00:	dfc00117 	ldw	ra,4(sp)
   40d04:	df000017 	ldw	fp,0(sp)
   40d08:	dec00204 	addi	sp,sp,8
   40d0c:	f800283a 	ret

00040d10 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   40d10:	defff204 	addi	sp,sp,-56
   40d14:	dfc00d15 	stw	ra,52(sp)
   40d18:	df000c15 	stw	fp,48(sp)
   40d1c:	df000c04 	addi	fp,sp,48
   40d20:	e13ffb15 	stw	r4,-20(fp)
   40d24:	e17ffc15 	stw	r5,-16(fp)
   40d28:	e1bffd15 	stw	r6,-12(fp)
   40d2c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   40d30:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   40d34:	e0bffc17 	ldw	r2,-16(fp)
   40d38:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   40d3c:	00003a06 	br	40e28 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   40d40:	e0bffb17 	ldw	r2,-20(fp)
   40d44:	10800c17 	ldw	r2,48(r2)
   40d48:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   40d4c:	e0bffb17 	ldw	r2,-20(fp)
   40d50:	10800d17 	ldw	r2,52(r2)
   40d54:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   40d58:	e0fffa17 	ldw	r3,-24(fp)
   40d5c:	e0bff917 	ldw	r2,-28(fp)
   40d60:	1880062e 	bgeu	r3,r2,40d7c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   40d64:	e0fff917 	ldw	r3,-28(fp)
   40d68:	e0bffa17 	ldw	r2,-24(fp)
   40d6c:	1885c83a 	sub	r2,r3,r2
   40d70:	10bfffc4 	addi	r2,r2,-1
   40d74:	e0bff815 	stw	r2,-32(fp)
   40d78:	00000c06 	br	40dac <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   40d7c:	e0bff917 	ldw	r2,-28(fp)
   40d80:	1005003a 	cmpeq	r2,r2,zero
   40d84:	1000051e 	bne	r2,zero,40d9c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   40d88:	00820004 	movi	r2,2048
   40d8c:	e0fffa17 	ldw	r3,-24(fp)
   40d90:	10c5c83a 	sub	r2,r2,r3
   40d94:	e0bff815 	stw	r2,-32(fp)
   40d98:	00000406 	br	40dac <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   40d9c:	0081ffc4 	movi	r2,2047
   40da0:	e0fffa17 	ldw	r3,-24(fp)
   40da4:	10c5c83a 	sub	r2,r2,r3
   40da8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   40dac:	e0bff817 	ldw	r2,-32(fp)
   40db0:	1005003a 	cmpeq	r2,r2,zero
   40db4:	10001f1e 	bne	r2,zero,40e34 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   40db8:	e0fffd17 	ldw	r3,-12(fp)
   40dbc:	e0bff817 	ldw	r2,-32(fp)
   40dc0:	1880022e 	bgeu	r3,r2,40dcc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   40dc4:	e0bffd17 	ldw	r2,-12(fp)
   40dc8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   40dcc:	e0bffb17 	ldw	r2,-20(fp)
   40dd0:	10c20e04 	addi	r3,r2,2104
   40dd4:	e0bffa17 	ldw	r2,-24(fp)
   40dd8:	1885883a 	add	r2,r3,r2
   40ddc:	e0fffc17 	ldw	r3,-16(fp)
   40de0:	1009883a 	mov	r4,r2
   40de4:	180b883a 	mov	r5,r3
   40de8:	e1bff817 	ldw	r6,-32(fp)
   40dec:	00423c40 	call	423c4 <memcpy>
      ptr   += n;
   40df0:	e0fff817 	ldw	r3,-32(fp)
   40df4:	e0bffc17 	ldw	r2,-16(fp)
   40df8:	10c5883a 	add	r2,r2,r3
   40dfc:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   40e00:	e0fffd17 	ldw	r3,-12(fp)
   40e04:	e0bff817 	ldw	r2,-32(fp)
   40e08:	1885c83a 	sub	r2,r3,r2
   40e0c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40e10:	e0fffa17 	ldw	r3,-24(fp)
   40e14:	e0bff817 	ldw	r2,-32(fp)
   40e18:	1885883a 	add	r2,r3,r2
   40e1c:	10c1ffcc 	andi	r3,r2,2047
   40e20:	e0bffb17 	ldw	r2,-20(fp)
   40e24:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   40e28:	e0bffd17 	ldw	r2,-12(fp)
   40e2c:	10800048 	cmpgei	r2,r2,1
   40e30:	103fc31e 	bne	r2,zero,40d40 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   40e34:	0005303a 	rdctl	r2,status
   40e38:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   40e3c:	e0fff517 	ldw	r3,-44(fp)
   40e40:	00bfff84 	movi	r2,-2
   40e44:	1884703a 	and	r2,r3,r2
   40e48:	1001703a 	wrctl	status,r2
  
  return context;
   40e4c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   40e50:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   40e54:	e0bffb17 	ldw	r2,-20(fp)
   40e58:	10800817 	ldw	r2,32(r2)
   40e5c:	10c00094 	ori	r3,r2,2
   40e60:	e0bffb17 	ldw	r2,-20(fp)
   40e64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   40e68:	e0bffb17 	ldw	r2,-20(fp)
   40e6c:	10800017 	ldw	r2,0(r2)
   40e70:	11000104 	addi	r4,r2,4
   40e74:	e0bffb17 	ldw	r2,-20(fp)
   40e78:	10800817 	ldw	r2,32(r2)
   40e7c:	1007883a 	mov	r3,r2
   40e80:	2005883a 	mov	r2,r4
   40e84:	10c00035 	stwio	r3,0(r2)
   40e88:	e0bff717 	ldw	r2,-36(fp)
   40e8c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   40e90:	e0bff417 	ldw	r2,-48(fp)
   40e94:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   40e98:	e0bffd17 	ldw	r2,-12(fp)
   40e9c:	10800050 	cmplti	r2,r2,1
   40ea0:	1000111e 	bne	r2,zero,40ee8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   40ea4:	e0bffe17 	ldw	r2,-8(fp)
   40ea8:	1090000c 	andi	r2,r2,16384
   40eac:	1004c03a 	cmpne	r2,r2,zero
   40eb0:	1000101e 	bne	r2,zero,40ef4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   40eb4:	e0bffb17 	ldw	r2,-20(fp)
   40eb8:	10c00d17 	ldw	r3,52(r2)
   40ebc:	e0bff917 	ldw	r2,-28(fp)
   40ec0:	1880051e 	bne	r3,r2,40ed8 <altera_avalon_jtag_uart_write+0x1c8>
   40ec4:	e0bffb17 	ldw	r2,-20(fp)
   40ec8:	10c00917 	ldw	r3,36(r2)
   40ecc:	e0bffb17 	ldw	r2,-20(fp)
   40ed0:	10800117 	ldw	r2,4(r2)
   40ed4:	18bff736 	bltu	r3,r2,40eb4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   40ed8:	e0bffb17 	ldw	r2,-20(fp)
   40edc:	10c00d17 	ldw	r3,52(r2)
   40ee0:	e0bff917 	ldw	r2,-28(fp)
   40ee4:	18800326 	beq	r3,r2,40ef4 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   40ee8:	e0bffd17 	ldw	r2,-12(fp)
   40eec:	10800048 	cmpgei	r2,r2,1
   40ef0:	103fcd1e 	bne	r2,zero,40e28 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   40ef4:	e0fffc17 	ldw	r3,-16(fp)
   40ef8:	e0bff617 	ldw	r2,-40(fp)
   40efc:	18800526 	beq	r3,r2,40f14 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   40f00:	e0fffc17 	ldw	r3,-16(fp)
   40f04:	e0bff617 	ldw	r2,-40(fp)
   40f08:	1887c83a 	sub	r3,r3,r2
   40f0c:	e0ffff15 	stw	r3,-4(fp)
   40f10:	00000906 	br	40f38 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   40f14:	e0bffe17 	ldw	r2,-8(fp)
   40f18:	1090000c 	andi	r2,r2,16384
   40f1c:	1005003a 	cmpeq	r2,r2,zero
   40f20:	1000031e 	bne	r2,zero,40f30 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   40f24:	00bffd44 	movi	r2,-11
   40f28:	e0bfff15 	stw	r2,-4(fp)
   40f2c:	00000206 	br	40f38 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   40f30:	00bffec4 	movi	r2,-5
   40f34:	e0bfff15 	stw	r2,-4(fp)
   40f38:	e0bfff17 	ldw	r2,-4(fp)
}
   40f3c:	e037883a 	mov	sp,fp
   40f40:	dfc00117 	ldw	ra,4(sp)
   40f44:	df000017 	ldw	fp,0(sp)
   40f48:	dec00204 	addi	sp,sp,8
   40f4c:	f800283a 	ret

00040f50 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   40f50:	defffa04 	addi	sp,sp,-24
   40f54:	dfc00515 	stw	ra,20(sp)
   40f58:	df000415 	stw	fp,16(sp)
   40f5c:	df000404 	addi	fp,sp,16
   40f60:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   40f64:	e0bfff17 	ldw	r2,-4(fp)
   40f68:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   40f6c:	e0bfff17 	ldw	r2,-4(fp)
   40f70:	10800104 	addi	r2,r2,4
   40f74:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   40f78:	0005303a 	rdctl	r2,status
   40f7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   40f80:	e0fffd17 	ldw	r3,-12(fp)
   40f84:	00bfff84 	movi	r2,-2
   40f88:	1884703a 	and	r2,r3,r2
   40f8c:	1001703a 	wrctl	status,r2
  
  return context;
   40f90:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   40f94:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   40f98:	0041ec40 	call	41ec4 <alt_tick>
   40f9c:	e0bffe17 	ldw	r2,-8(fp)
   40fa0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   40fa4:	e0bffc17 	ldw	r2,-16(fp)
   40fa8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   40fac:	e037883a 	mov	sp,fp
   40fb0:	dfc00117 	ldw	ra,4(sp)
   40fb4:	df000017 	ldw	fp,0(sp)
   40fb8:	dec00204 	addi	sp,sp,8
   40fbc:	f800283a 	ret

00040fc0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   40fc0:	defff804 	addi	sp,sp,-32
   40fc4:	dfc00715 	stw	ra,28(sp)
   40fc8:	df000615 	stw	fp,24(sp)
   40fcc:	df000604 	addi	fp,sp,24
   40fd0:	e13ffc15 	stw	r4,-16(fp)
   40fd4:	e17ffd15 	stw	r5,-12(fp)
   40fd8:	e1bffe15 	stw	r6,-8(fp)
   40fdc:	e1ffff15 	stw	r7,-4(fp)
   40fe0:	e0bfff17 	ldw	r2,-4(fp)
   40fe4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   40fe8:	00800134 	movhi	r2,4
   40fec:	10959504 	addi	r2,r2,22100
   40ff0:	10800017 	ldw	r2,0(r2)
   40ff4:	1004c03a 	cmpne	r2,r2,zero
   40ff8:	1000041e 	bne	r2,zero,4100c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   40ffc:	00c00134 	movhi	r3,4
   41000:	18d59504 	addi	r3,r3,22100
   41004:	e0bffb17 	ldw	r2,-20(fp)
   41008:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4100c:	e0bffc17 	ldw	r2,-16(fp)
   41010:	10800104 	addi	r2,r2,4
   41014:	1007883a 	mov	r3,r2
   41018:	008001c4 	movi	r2,7
   4101c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   41020:	d8000015 	stw	zero,0(sp)
   41024:	e13ffd17 	ldw	r4,-12(fp)
   41028:	e17ffe17 	ldw	r5,-8(fp)
   4102c:	01800134 	movhi	r6,4
   41030:	3183d404 	addi	r6,r6,3920
   41034:	e1fffc17 	ldw	r7,-16(fp)
   41038:	00416b40 	call	416b4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4103c:	e037883a 	mov	sp,fp
   41040:	dfc00117 	ldw	ra,4(sp)
   41044:	df000017 	ldw	fp,0(sp)
   41048:	dec00204 	addi	sp,sp,8
   4104c:	f800283a 	ret

00041050 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   41050:	defff404 	addi	sp,sp,-48
   41054:	df000b15 	stw	fp,44(sp)
   41058:	df000b04 	addi	fp,sp,44
   4105c:	e13ffb15 	stw	r4,-20(fp)
   41060:	e17ffc15 	stw	r5,-16(fp)
   41064:	e1bffd15 	stw	r6,-12(fp)
   41068:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4106c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   41070:	00800134 	movhi	r2,4
   41074:	10959504 	addi	r2,r2,22100
   41078:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4107c:	1005003a 	cmpeq	r2,r2,zero
   41080:	1000411e 	bne	r2,zero,41188 <alt_alarm_start+0x138>
  {
    if (alarm)
   41084:	e0bffb17 	ldw	r2,-20(fp)
   41088:	1005003a 	cmpeq	r2,r2,zero
   4108c:	10003b1e 	bne	r2,zero,4117c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   41090:	e0fffb17 	ldw	r3,-20(fp)
   41094:	e0bffd17 	ldw	r2,-12(fp)
   41098:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   4109c:	e0fffb17 	ldw	r3,-20(fp)
   410a0:	e0bffe17 	ldw	r2,-8(fp)
   410a4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   410a8:	0005303a 	rdctl	r2,status
   410ac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   410b0:	e0fff817 	ldw	r3,-32(fp)
   410b4:	00bfff84 	movi	r2,-2
   410b8:	1884703a 	and	r2,r3,r2
   410bc:	1001703a 	wrctl	status,r2
  
  return context;
   410c0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   410c4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   410c8:	00800134 	movhi	r2,4
   410cc:	10959604 	addi	r2,r2,22104
   410d0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   410d4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   410d8:	e0fffc17 	ldw	r3,-16(fp)
   410dc:	e0bff917 	ldw	r2,-28(fp)
   410e0:	1885883a 	add	r2,r3,r2
   410e4:	10c00044 	addi	r3,r2,1
   410e8:	e0bffb17 	ldw	r2,-20(fp)
   410ec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   410f0:	e0bffb17 	ldw	r2,-20(fp)
   410f4:	10c00217 	ldw	r3,8(r2)
   410f8:	e0bff917 	ldw	r2,-28(fp)
   410fc:	1880042e 	bgeu	r3,r2,41110 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   41100:	e0fffb17 	ldw	r3,-20(fp)
   41104:	00800044 	movi	r2,1
   41108:	18800405 	stb	r2,16(r3)
   4110c:	00000206 	br	41118 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   41110:	e0bffb17 	ldw	r2,-20(fp)
   41114:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   41118:	e0fffb17 	ldw	r3,-20(fp)
   4111c:	00800134 	movhi	r2,4
   41120:	108fff04 	addi	r2,r2,16380
   41124:	e0bff615 	stw	r2,-40(fp)
   41128:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4112c:	e0fff717 	ldw	r3,-36(fp)
   41130:	e0bff617 	ldw	r2,-40(fp)
   41134:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   41138:	e0bff617 	ldw	r2,-40(fp)
   4113c:	10c00017 	ldw	r3,0(r2)
   41140:	e0bff717 	ldw	r2,-36(fp)
   41144:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   41148:	e0bff617 	ldw	r2,-40(fp)
   4114c:	10c00017 	ldw	r3,0(r2)
   41150:	e0bff717 	ldw	r2,-36(fp)
   41154:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   41158:	e0fff617 	ldw	r3,-40(fp)
   4115c:	e0bff717 	ldw	r2,-36(fp)
   41160:	18800015 	stw	r2,0(r3)
   41164:	e0bffa17 	ldw	r2,-24(fp)
   41168:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4116c:	e0bff517 	ldw	r2,-44(fp)
   41170:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   41174:	e03fff15 	stw	zero,-4(fp)
   41178:	00000506 	br	41190 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   4117c:	00bffa84 	movi	r2,-22
   41180:	e0bfff15 	stw	r2,-4(fp)
   41184:	00000206 	br	41190 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   41188:	00bfde84 	movi	r2,-134
   4118c:	e0bfff15 	stw	r2,-4(fp)
   41190:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   41194:	e037883a 	mov	sp,fp
   41198:	df000017 	ldw	fp,0(sp)
   4119c:	dec00104 	addi	sp,sp,4
   411a0:	f800283a 	ret

000411a4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   411a4:	defffa04 	addi	sp,sp,-24
   411a8:	dfc00515 	stw	ra,20(sp)
   411ac:	df000415 	stw	fp,16(sp)
   411b0:	df000404 	addi	fp,sp,16
   411b4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   411b8:	008000c4 	movi	r2,3
   411bc:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
   411c0:	e13ffc17 	ldw	r4,-16(fp)
   411c4:	014003f4 	movhi	r5,15
   411c8:	29509004 	addi	r5,r5,16960
   411cc:	004290c0 	call	4290c <__mulsi3>
   411d0:	100b883a 	mov	r5,r2
   411d4:	0100bef4 	movhi	r4,763
   411d8:	213c2004 	addi	r4,r4,-3968
   411dc:	00428fc0 	call	428fc <__udivsi3>
   411e0:	100b883a 	mov	r5,r2
   411e4:	01200034 	movhi	r4,32768
   411e8:	213fffc4 	addi	r4,r4,-1
   411ec:	00428fc0 	call	428fc <__udivsi3>
   411f0:	100b883a 	mov	r5,r2
   411f4:	e13fff17 	ldw	r4,-4(fp)
   411f8:	00428fc0 	call	428fc <__udivsi3>
   411fc:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   41200:	e0bffd17 	ldw	r2,-12(fp)
   41204:	1005003a 	cmpeq	r2,r2,zero
   41208:	10002a1e 	bne	r2,zero,412b4 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
   4120c:	e03ffe15 	stw	zero,-8(fp)
   41210:	00001706 	br	41270 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   41214:	00a00034 	movhi	r2,32768
   41218:	10bfffc4 	addi	r2,r2,-1
   4121c:	10bfffc4 	addi	r2,r2,-1
   41220:	103ffe1e 	bne	r2,zero,4121c <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   41224:	e13ffc17 	ldw	r4,-16(fp)
   41228:	014003f4 	movhi	r5,15
   4122c:	29509004 	addi	r5,r5,16960
   41230:	004290c0 	call	4290c <__mulsi3>
   41234:	100b883a 	mov	r5,r2
   41238:	0100bef4 	movhi	r4,763
   4123c:	213c2004 	addi	r4,r4,-3968
   41240:	00428fc0 	call	428fc <__udivsi3>
   41244:	100b883a 	mov	r5,r2
   41248:	01200034 	movhi	r4,32768
   4124c:	213fffc4 	addi	r4,r4,-1
   41250:	00428fc0 	call	428fc <__udivsi3>
   41254:	1007883a 	mov	r3,r2
   41258:	e0bfff17 	ldw	r2,-4(fp)
   4125c:	10c5c83a 	sub	r2,r2,r3
   41260:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   41264:	e0bffe17 	ldw	r2,-8(fp)
   41268:	10800044 	addi	r2,r2,1
   4126c:	e0bffe15 	stw	r2,-8(fp)
   41270:	e0fffe17 	ldw	r3,-8(fp)
   41274:	e0bffd17 	ldw	r2,-12(fp)
   41278:	18bfe616 	blt	r3,r2,41214 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   4127c:	e13ffc17 	ldw	r4,-16(fp)
   41280:	014003f4 	movhi	r5,15
   41284:	29509004 	addi	r5,r5,16960
   41288:	004290c0 	call	4290c <__mulsi3>
   4128c:	100b883a 	mov	r5,r2
   41290:	0100bef4 	movhi	r4,763
   41294:	213c2004 	addi	r4,r4,-3968
   41298:	00428fc0 	call	428fc <__udivsi3>
   4129c:	1009883a 	mov	r4,r2
   412a0:	e17fff17 	ldw	r5,-4(fp)
   412a4:	004290c0 	call	4290c <__mulsi3>
   412a8:	10bfffc4 	addi	r2,r2,-1
   412ac:	103ffe1e 	bne	r2,zero,412a8 <alt_busy_sleep+0x104>
   412b0:	00000d06 	br	412e8 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   412b4:	e13ffc17 	ldw	r4,-16(fp)
   412b8:	014003f4 	movhi	r5,15
   412bc:	29509004 	addi	r5,r5,16960
   412c0:	004290c0 	call	4290c <__mulsi3>
   412c4:	100b883a 	mov	r5,r2
   412c8:	0100bef4 	movhi	r4,763
   412cc:	213c2004 	addi	r4,r4,-3968
   412d0:	00428fc0 	call	428fc <__udivsi3>
   412d4:	1009883a 	mov	r4,r2
   412d8:	e17fff17 	ldw	r5,-4(fp)
   412dc:	004290c0 	call	4290c <__mulsi3>
   412e0:	10bfffc4 	addi	r2,r2,-1
   412e4:	00bffe16 	blt	zero,r2,412e0 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   412e8:	0005883a 	mov	r2,zero
}
   412ec:	e037883a 	mov	sp,fp
   412f0:	dfc00117 	ldw	ra,4(sp)
   412f4:	df000017 	ldw	fp,0(sp)
   412f8:	dec00204 	addi	sp,sp,8
   412fc:	f800283a 	ret

00041300 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   41300:	defff804 	addi	sp,sp,-32
   41304:	dfc00715 	stw	ra,28(sp)
   41308:	df000615 	stw	fp,24(sp)
   4130c:	df000604 	addi	fp,sp,24
   41310:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   41314:	e0bffc17 	ldw	r2,-16(fp)
   41318:	1004803a 	cmplt	r2,r2,zero
   4131c:	1000091e 	bne	r2,zero,41344 <close+0x44>
   41320:	e13ffc17 	ldw	r4,-16(fp)
   41324:	01400304 	movi	r5,12
   41328:	004290c0 	call	4290c <__mulsi3>
   4132c:	1007883a 	mov	r3,r2
   41330:	00800134 	movhi	r2,4
   41334:	108e9804 	addi	r2,r2,14944
   41338:	1887883a 	add	r3,r3,r2
   4133c:	e0ffff15 	stw	r3,-4(fp)
   41340:	00000106 	br	41348 <close+0x48>
   41344:	e03fff15 	stw	zero,-4(fp)
   41348:	e0bfff17 	ldw	r2,-4(fp)
   4134c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   41350:	e0bffb17 	ldw	r2,-20(fp)
   41354:	1005003a 	cmpeq	r2,r2,zero
   41358:	10001d1e 	bne	r2,zero,413d0 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4135c:	e0bffb17 	ldw	r2,-20(fp)
   41360:	10800017 	ldw	r2,0(r2)
   41364:	10800417 	ldw	r2,16(r2)
   41368:	1005003a 	cmpeq	r2,r2,zero
   4136c:	1000071e 	bne	r2,zero,4138c <close+0x8c>
   41370:	e0bffb17 	ldw	r2,-20(fp)
   41374:	10800017 	ldw	r2,0(r2)
   41378:	10800417 	ldw	r2,16(r2)
   4137c:	e13ffb17 	ldw	r4,-20(fp)
   41380:	103ee83a 	callr	r2
   41384:	e0bffe15 	stw	r2,-8(fp)
   41388:	00000106 	br	41390 <close+0x90>
   4138c:	e03ffe15 	stw	zero,-8(fp)
   41390:	e0bffe17 	ldw	r2,-8(fp)
   41394:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   41398:	e13ffc17 	ldw	r4,-16(fp)
   4139c:	0041db40 	call	41db4 <alt_release_fd>
    if (rval < 0)
   413a0:	e0bffa17 	ldw	r2,-24(fp)
   413a4:	1004403a 	cmpge	r2,r2,zero
   413a8:	1000071e 	bne	r2,zero,413c8 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   413ac:	00414000 	call	41400 <alt_get_errno>
   413b0:	e0fffa17 	ldw	r3,-24(fp)
   413b4:	00c7c83a 	sub	r3,zero,r3
   413b8:	10c00015 	stw	r3,0(r2)
      return -1;
   413bc:	00bfffc4 	movi	r2,-1
   413c0:	e0bffd15 	stw	r2,-12(fp)
   413c4:	00000806 	br	413e8 <close+0xe8>
    }
    return 0;
   413c8:	e03ffd15 	stw	zero,-12(fp)
   413cc:	00000606 	br	413e8 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   413d0:	00414000 	call	41400 <alt_get_errno>
   413d4:	1007883a 	mov	r3,r2
   413d8:	00801444 	movi	r2,81
   413dc:	18800015 	stw	r2,0(r3)
    return -1;
   413e0:	00bfffc4 	movi	r2,-1
   413e4:	e0bffd15 	stw	r2,-12(fp)
   413e8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   413ec:	e037883a 	mov	sp,fp
   413f0:	dfc00117 	ldw	ra,4(sp)
   413f4:	df000017 	ldw	fp,0(sp)
   413f8:	dec00204 	addi	sp,sp,8
   413fc:	f800283a 	ret

00041400 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   41400:	defffd04 	addi	sp,sp,-12
   41404:	dfc00215 	stw	ra,8(sp)
   41408:	df000115 	stw	fp,4(sp)
   4140c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   41410:	00800134 	movhi	r2,4
   41414:	108ffd04 	addi	r2,r2,16372
   41418:	10800017 	ldw	r2,0(r2)
   4141c:	1005003a 	cmpeq	r2,r2,zero
   41420:	1000061e 	bne	r2,zero,4143c <alt_get_errno+0x3c>
   41424:	00800134 	movhi	r2,4
   41428:	108ffd04 	addi	r2,r2,16372
   4142c:	10800017 	ldw	r2,0(r2)
   41430:	103ee83a 	callr	r2
   41434:	e0bfff15 	stw	r2,-4(fp)
   41438:	00000306 	br	41448 <alt_get_errno+0x48>
   4143c:	00800134 	movhi	r2,4
   41440:	10959704 	addi	r2,r2,22108
   41444:	e0bfff15 	stw	r2,-4(fp)
   41448:	e0bfff17 	ldw	r2,-4(fp)
}
   4144c:	e037883a 	mov	sp,fp
   41450:	dfc00117 	ldw	ra,4(sp)
   41454:	df000017 	ldw	fp,0(sp)
   41458:	dec00204 	addi	sp,sp,8
   4145c:	f800283a 	ret

00041460 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   41460:	deffff04 	addi	sp,sp,-4
   41464:	df000015 	stw	fp,0(sp)
   41468:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4146c:	e037883a 	mov	sp,fp
   41470:	df000017 	ldw	fp,0(sp)
   41474:	dec00104 	addi	sp,sp,4
   41478:	f800283a 	ret

0004147c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4147c:	defffc04 	addi	sp,sp,-16
   41480:	df000315 	stw	fp,12(sp)
   41484:	df000304 	addi	fp,sp,12
   41488:	e13ffd15 	stw	r4,-12(fp)
   4148c:	e17ffe15 	stw	r5,-8(fp)
   41490:	e1bfff15 	stw	r6,-4(fp)
  return len;
   41494:	e0bfff17 	ldw	r2,-4(fp)
}
   41498:	e037883a 	mov	sp,fp
   4149c:	df000017 	ldw	fp,0(sp)
   414a0:	dec00104 	addi	sp,sp,4
   414a4:	f800283a 	ret

000414a8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   414a8:	defff904 	addi	sp,sp,-28
   414ac:	dfc00615 	stw	ra,24(sp)
   414b0:	df000515 	stw	fp,20(sp)
   414b4:	df000504 	addi	fp,sp,20
   414b8:	e13ffd15 	stw	r4,-12(fp)
   414bc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   414c0:	e0bffd17 	ldw	r2,-12(fp)
   414c4:	1005003a 	cmpeq	r2,r2,zero
   414c8:	1000041e 	bne	r2,zero,414dc <alt_dev_llist_insert+0x34>
   414cc:	e0bffd17 	ldw	r2,-12(fp)
   414d0:	10800217 	ldw	r2,8(r2)
   414d4:	1004c03a 	cmpne	r2,r2,zero
   414d8:	1000071e 	bne	r2,zero,414f8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   414dc:	004155c0 	call	4155c <alt_get_errno>
   414e0:	1007883a 	mov	r3,r2
   414e4:	00800584 	movi	r2,22
   414e8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   414ec:	00bffa84 	movi	r2,-22
   414f0:	e0bfff15 	stw	r2,-4(fp)
   414f4:	00001306 	br	41544 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   414f8:	e0fffd17 	ldw	r3,-12(fp)
   414fc:	e0bffe17 	ldw	r2,-8(fp)
   41500:	e0bffb15 	stw	r2,-20(fp)
   41504:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   41508:	e0fffc17 	ldw	r3,-16(fp)
   4150c:	e0bffb17 	ldw	r2,-20(fp)
   41510:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   41514:	e0bffb17 	ldw	r2,-20(fp)
   41518:	10c00017 	ldw	r3,0(r2)
   4151c:	e0bffc17 	ldw	r2,-16(fp)
   41520:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   41524:	e0bffb17 	ldw	r2,-20(fp)
   41528:	10c00017 	ldw	r3,0(r2)
   4152c:	e0bffc17 	ldw	r2,-16(fp)
   41530:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   41534:	e0fffb17 	ldw	r3,-20(fp)
   41538:	e0bffc17 	ldw	r2,-16(fp)
   4153c:	18800015 	stw	r2,0(r3)

  return 0;  
   41540:	e03fff15 	stw	zero,-4(fp)
   41544:	e0bfff17 	ldw	r2,-4(fp)
}
   41548:	e037883a 	mov	sp,fp
   4154c:	dfc00117 	ldw	ra,4(sp)
   41550:	df000017 	ldw	fp,0(sp)
   41554:	dec00204 	addi	sp,sp,8
   41558:	f800283a 	ret

0004155c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4155c:	defffd04 	addi	sp,sp,-12
   41560:	dfc00215 	stw	ra,8(sp)
   41564:	df000115 	stw	fp,4(sp)
   41568:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4156c:	00800134 	movhi	r2,4
   41570:	108ffd04 	addi	r2,r2,16372
   41574:	10800017 	ldw	r2,0(r2)
   41578:	1005003a 	cmpeq	r2,r2,zero
   4157c:	1000061e 	bne	r2,zero,41598 <alt_get_errno+0x3c>
   41580:	00800134 	movhi	r2,4
   41584:	108ffd04 	addi	r2,r2,16372
   41588:	10800017 	ldw	r2,0(r2)
   4158c:	103ee83a 	callr	r2
   41590:	e0bfff15 	stw	r2,-4(fp)
   41594:	00000306 	br	415a4 <alt_get_errno+0x48>
   41598:	00800134 	movhi	r2,4
   4159c:	10959704 	addi	r2,r2,22108
   415a0:	e0bfff15 	stw	r2,-4(fp)
   415a4:	e0bfff17 	ldw	r2,-4(fp)
}
   415a8:	e037883a 	mov	sp,fp
   415ac:	dfc00117 	ldw	ra,4(sp)
   415b0:	df000017 	ldw	fp,0(sp)
   415b4:	dec00204 	addi	sp,sp,8
   415b8:	f800283a 	ret

000415bc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   415bc:	defffd04 	addi	sp,sp,-12
   415c0:	dfc00215 	stw	ra,8(sp)
   415c4:	df000115 	stw	fp,4(sp)
   415c8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   415cc:	00bfff04 	movi	r2,-4
   415d0:	00c00134 	movhi	r3,4
   415d4:	18ca6a04 	addi	r3,r3,10664
   415d8:	1885883a 	add	r2,r3,r2
   415dc:	e0bfff15 	stw	r2,-4(fp)
   415e0:	00000606 	br	415fc <_do_ctors+0x40>
        (*ctor) (); 
   415e4:	e0bfff17 	ldw	r2,-4(fp)
   415e8:	10800017 	ldw	r2,0(r2)
   415ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   415f0:	e0bfff17 	ldw	r2,-4(fp)
   415f4:	10bfff04 	addi	r2,r2,-4
   415f8:	e0bfff15 	stw	r2,-4(fp)
   415fc:	e0ffff17 	ldw	r3,-4(fp)
   41600:	00800134 	movhi	r2,4
   41604:	108a6904 	addi	r2,r2,10660
   41608:	18bff62e 	bgeu	r3,r2,415e4 <_do_ctors+0x28>
        (*ctor) (); 
}
   4160c:	e037883a 	mov	sp,fp
   41610:	dfc00117 	ldw	ra,4(sp)
   41614:	df000017 	ldw	fp,0(sp)
   41618:	dec00204 	addi	sp,sp,8
   4161c:	f800283a 	ret

00041620 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   41620:	defffd04 	addi	sp,sp,-12
   41624:	dfc00215 	stw	ra,8(sp)
   41628:	df000115 	stw	fp,4(sp)
   4162c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   41630:	00bfff04 	movi	r2,-4
   41634:	00c00134 	movhi	r3,4
   41638:	18ca6a04 	addi	r3,r3,10664
   4163c:	1885883a 	add	r2,r3,r2
   41640:	e0bfff15 	stw	r2,-4(fp)
   41644:	00000606 	br	41660 <_do_dtors+0x40>
        (*dtor) (); 
   41648:	e0bfff17 	ldw	r2,-4(fp)
   4164c:	10800017 	ldw	r2,0(r2)
   41650:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   41654:	e0bfff17 	ldw	r2,-4(fp)
   41658:	10bfff04 	addi	r2,r2,-4
   4165c:	e0bfff15 	stw	r2,-4(fp)
   41660:	e0ffff17 	ldw	r3,-4(fp)
   41664:	00800134 	movhi	r2,4
   41668:	108a6a04 	addi	r2,r2,10664
   4166c:	18bff62e 	bgeu	r3,r2,41648 <_do_dtors+0x28>
        (*dtor) (); 
}
   41670:	e037883a 	mov	sp,fp
   41674:	dfc00117 	ldw	ra,4(sp)
   41678:	df000017 	ldw	fp,0(sp)
   4167c:	dec00204 	addi	sp,sp,8
   41680:	f800283a 	ret

00041684 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   41684:	defffe04 	addi	sp,sp,-8
   41688:	dfc00115 	stw	ra,4(sp)
   4168c:	df000015 	stw	fp,0(sp)
   41690:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   41694:	0009883a 	mov	r4,zero
   41698:	01440004 	movi	r5,4096
   4169c:	00422740 	call	42274 <alt_icache_flush>
#endif
}
   416a0:	e037883a 	mov	sp,fp
   416a4:	dfc00117 	ldw	ra,4(sp)
   416a8:	df000017 	ldw	fp,0(sp)
   416ac:	dec00204 	addi	sp,sp,8
   416b0:	f800283a 	ret

000416b4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   416b4:	defff904 	addi	sp,sp,-28
   416b8:	dfc00615 	stw	ra,24(sp)
   416bc:	df000515 	stw	fp,20(sp)
   416c0:	df000504 	addi	fp,sp,20
   416c4:	e13ffc15 	stw	r4,-16(fp)
   416c8:	e17ffd15 	stw	r5,-12(fp)
   416cc:	e1bffe15 	stw	r6,-8(fp)
   416d0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   416d4:	e0800217 	ldw	r2,8(fp)
   416d8:	d8800015 	stw	r2,0(sp)
   416dc:	e13ffc17 	ldw	r4,-16(fp)
   416e0:	e17ffd17 	ldw	r5,-12(fp)
   416e4:	e1bffe17 	ldw	r6,-8(fp)
   416e8:	e1ffff17 	ldw	r7,-4(fp)
   416ec:	00418880 	call	41888 <alt_iic_isr_register>
}  
   416f0:	e037883a 	mov	sp,fp
   416f4:	dfc00117 	ldw	ra,4(sp)
   416f8:	df000017 	ldw	fp,0(sp)
   416fc:	dec00204 	addi	sp,sp,8
   41700:	f800283a 	ret

00041704 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   41704:	defff904 	addi	sp,sp,-28
   41708:	df000615 	stw	fp,24(sp)
   4170c:	df000604 	addi	fp,sp,24
   41710:	e13ffe15 	stw	r4,-8(fp)
   41714:	e17fff15 	stw	r5,-4(fp)
   41718:	e0bfff17 	ldw	r2,-4(fp)
   4171c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41720:	0005303a 	rdctl	r2,status
   41724:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41728:	e0fffb17 	ldw	r3,-20(fp)
   4172c:	00bfff84 	movi	r2,-2
   41730:	1884703a 	and	r2,r3,r2
   41734:	1001703a 	wrctl	status,r2
  
  return context;
   41738:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4173c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   41740:	e0fffc17 	ldw	r3,-16(fp)
   41744:	00800044 	movi	r2,1
   41748:	10c4983a 	sll	r2,r2,r3
   4174c:	1007883a 	mov	r3,r2
   41750:	00800134 	movhi	r2,4
   41754:	10959404 	addi	r2,r2,22096
   41758:	10800017 	ldw	r2,0(r2)
   4175c:	1886b03a 	or	r3,r3,r2
   41760:	00800134 	movhi	r2,4
   41764:	10959404 	addi	r2,r2,22096
   41768:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4176c:	00800134 	movhi	r2,4
   41770:	10959404 	addi	r2,r2,22096
   41774:	10800017 	ldw	r2,0(r2)
   41778:	100170fa 	wrctl	ienable,r2
   4177c:	e0bffd17 	ldw	r2,-12(fp)
   41780:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41784:	e0bffa17 	ldw	r2,-24(fp)
   41788:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4178c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   41790:	e037883a 	mov	sp,fp
   41794:	df000017 	ldw	fp,0(sp)
   41798:	dec00104 	addi	sp,sp,4
   4179c:	f800283a 	ret

000417a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   417a0:	defff904 	addi	sp,sp,-28
   417a4:	df000615 	stw	fp,24(sp)
   417a8:	df000604 	addi	fp,sp,24
   417ac:	e13ffe15 	stw	r4,-8(fp)
   417b0:	e17fff15 	stw	r5,-4(fp)
   417b4:	e0bfff17 	ldw	r2,-4(fp)
   417b8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   417bc:	0005303a 	rdctl	r2,status
   417c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   417c4:	e0fffb17 	ldw	r3,-20(fp)
   417c8:	00bfff84 	movi	r2,-2
   417cc:	1884703a 	and	r2,r3,r2
   417d0:	1001703a 	wrctl	status,r2
  
  return context;
   417d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   417d8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   417dc:	e0fffc17 	ldw	r3,-16(fp)
   417e0:	00800044 	movi	r2,1
   417e4:	10c4983a 	sll	r2,r2,r3
   417e8:	0084303a 	nor	r2,zero,r2
   417ec:	1007883a 	mov	r3,r2
   417f0:	00800134 	movhi	r2,4
   417f4:	10959404 	addi	r2,r2,22096
   417f8:	10800017 	ldw	r2,0(r2)
   417fc:	1886703a 	and	r3,r3,r2
   41800:	00800134 	movhi	r2,4
   41804:	10959404 	addi	r2,r2,22096
   41808:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4180c:	00800134 	movhi	r2,4
   41810:	10959404 	addi	r2,r2,22096
   41814:	10800017 	ldw	r2,0(r2)
   41818:	100170fa 	wrctl	ienable,r2
   4181c:	e0bffd17 	ldw	r2,-12(fp)
   41820:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41824:	e0bffa17 	ldw	r2,-24(fp)
   41828:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4182c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   41830:	e037883a 	mov	sp,fp
   41834:	df000017 	ldw	fp,0(sp)
   41838:	dec00104 	addi	sp,sp,4
   4183c:	f800283a 	ret

00041840 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   41840:	defffc04 	addi	sp,sp,-16
   41844:	df000315 	stw	fp,12(sp)
   41848:	df000304 	addi	fp,sp,12
   4184c:	e13ffe15 	stw	r4,-8(fp)
   41850:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   41854:	000530fa 	rdctl	r2,ienable
   41858:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4185c:	e0ffff17 	ldw	r3,-4(fp)
   41860:	00800044 	movi	r2,1
   41864:	10c4983a 	sll	r2,r2,r3
   41868:	1007883a 	mov	r3,r2
   4186c:	e0bffd17 	ldw	r2,-12(fp)
   41870:	1884703a 	and	r2,r3,r2
   41874:	1004c03a 	cmpne	r2,r2,zero
}
   41878:	e037883a 	mov	sp,fp
   4187c:	df000017 	ldw	fp,0(sp)
   41880:	dec00104 	addi	sp,sp,4
   41884:	f800283a 	ret

00041888 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   41888:	defff404 	addi	sp,sp,-48
   4188c:	dfc00b15 	stw	ra,44(sp)
   41890:	df000a15 	stw	fp,40(sp)
   41894:	df000a04 	addi	fp,sp,40
   41898:	e13ffb15 	stw	r4,-20(fp)
   4189c:	e17ffc15 	stw	r5,-16(fp)
   418a0:	e1bffd15 	stw	r6,-12(fp)
   418a4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   418a8:	00bffa84 	movi	r2,-22
   418ac:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   418b0:	e0bffc17 	ldw	r2,-16(fp)
   418b4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   418b8:	e0bff917 	ldw	r2,-28(fp)
   418bc:	10800808 	cmpgei	r2,r2,32
   418c0:	1000291e 	bne	r2,zero,41968 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   418c4:	0005303a 	rdctl	r2,status
   418c8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   418cc:	e0fff717 	ldw	r3,-36(fp)
   418d0:	00bfff84 	movi	r2,-2
   418d4:	1884703a 	and	r2,r3,r2
   418d8:	1001703a 	wrctl	status,r2
  
  return context;
   418dc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   418e0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   418e4:	e0bff917 	ldw	r2,-28(fp)
   418e8:	00c00134 	movhi	r3,4
   418ec:	18d59804 	addi	r3,r3,22112
   418f0:	100490fa 	slli	r2,r2,3
   418f4:	10c7883a 	add	r3,r2,r3
   418f8:	e0bffd17 	ldw	r2,-12(fp)
   418fc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   41900:	e0bff917 	ldw	r2,-28(fp)
   41904:	00c00134 	movhi	r3,4
   41908:	18d59804 	addi	r3,r3,22112
   4190c:	100490fa 	slli	r2,r2,3
   41910:	10c5883a 	add	r2,r2,r3
   41914:	10c00104 	addi	r3,r2,4
   41918:	e0bffe17 	ldw	r2,-8(fp)
   4191c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   41920:	e0bffd17 	ldw	r2,-12(fp)
   41924:	1005003a 	cmpeq	r2,r2,zero
   41928:	1000051e 	bne	r2,zero,41940 <alt_iic_isr_register+0xb8>
   4192c:	e17ff917 	ldw	r5,-28(fp)
   41930:	e13ffb17 	ldw	r4,-20(fp)
   41934:	00417040 	call	41704 <alt_ic_irq_enable>
   41938:	e0bfff15 	stw	r2,-4(fp)
   4193c:	00000406 	br	41950 <alt_iic_isr_register+0xc8>
   41940:	e17ff917 	ldw	r5,-28(fp)
   41944:	e13ffb17 	ldw	r4,-20(fp)
   41948:	00417a00 	call	417a0 <alt_ic_irq_disable>
   4194c:	e0bfff15 	stw	r2,-4(fp)
   41950:	e0bfff17 	ldw	r2,-4(fp)
   41954:	e0bffa15 	stw	r2,-24(fp)
   41958:	e0bff817 	ldw	r2,-32(fp)
   4195c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41960:	e0bff617 	ldw	r2,-40(fp)
   41964:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   41968:	e0bffa17 	ldw	r2,-24(fp)
}
   4196c:	e037883a 	mov	sp,fp
   41970:	dfc00117 	ldw	ra,4(sp)
   41974:	df000017 	ldw	fp,0(sp)
   41978:	dec00204 	addi	sp,sp,8
   4197c:	f800283a 	ret

00041980 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   41980:	defff804 	addi	sp,sp,-32
   41984:	dfc00715 	stw	ra,28(sp)
   41988:	df000615 	stw	fp,24(sp)
   4198c:	dc000515 	stw	r16,20(sp)
   41990:	df000504 	addi	fp,sp,20
   41994:	e13ffc15 	stw	r4,-16(fp)
   41998:	e17ffd15 	stw	r5,-12(fp)
   4199c:	e1bffe15 	stw	r6,-8(fp)
   419a0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   419a4:	e13ffd17 	ldw	r4,-12(fp)
   419a8:	e17ffe17 	ldw	r5,-8(fp)
   419ac:	e1bfff17 	ldw	r6,-4(fp)
   419b0:	0041bc80 	call	41bc8 <open>
   419b4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   419b8:	e0bffb17 	ldw	r2,-20(fp)
   419bc:	1004803a 	cmplt	r2,r2,zero
   419c0:	10001f1e 	bne	r2,zero,41a40 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   419c4:	e13ffb17 	ldw	r4,-20(fp)
   419c8:	04000134 	movhi	r16,4
   419cc:	840e9804 	addi	r16,r16,14944
   419d0:	01400304 	movi	r5,12
   419d4:	004290c0 	call	4290c <__mulsi3>
   419d8:	1405883a 	add	r2,r2,r16
   419dc:	10c00017 	ldw	r3,0(r2)
   419e0:	e0bffc17 	ldw	r2,-16(fp)
   419e4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   419e8:	e13ffb17 	ldw	r4,-20(fp)
   419ec:	04000134 	movhi	r16,4
   419f0:	840e9804 	addi	r16,r16,14944
   419f4:	01400304 	movi	r5,12
   419f8:	004290c0 	call	4290c <__mulsi3>
   419fc:	1405883a 	add	r2,r2,r16
   41a00:	10800104 	addi	r2,r2,4
   41a04:	10c00017 	ldw	r3,0(r2)
   41a08:	e0bffc17 	ldw	r2,-16(fp)
   41a0c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   41a10:	e13ffb17 	ldw	r4,-20(fp)
   41a14:	04000134 	movhi	r16,4
   41a18:	840e9804 	addi	r16,r16,14944
   41a1c:	01400304 	movi	r5,12
   41a20:	004290c0 	call	4290c <__mulsi3>
   41a24:	1405883a 	add	r2,r2,r16
   41a28:	10800204 	addi	r2,r2,8
   41a2c:	10c00017 	ldw	r3,0(r2)
   41a30:	e0bffc17 	ldw	r2,-16(fp)
   41a34:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   41a38:	e13ffb17 	ldw	r4,-20(fp)
   41a3c:	0041db40 	call	41db4 <alt_release_fd>
  }
} 
   41a40:	e037883a 	mov	sp,fp
   41a44:	dfc00217 	ldw	ra,8(sp)
   41a48:	df000117 	ldw	fp,4(sp)
   41a4c:	dc000017 	ldw	r16,0(sp)
   41a50:	dec00304 	addi	sp,sp,12
   41a54:	f800283a 	ret

00041a58 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   41a58:	defffb04 	addi	sp,sp,-20
   41a5c:	dfc00415 	stw	ra,16(sp)
   41a60:	df000315 	stw	fp,12(sp)
   41a64:	df000304 	addi	fp,sp,12
   41a68:	e13ffd15 	stw	r4,-12(fp)
   41a6c:	e17ffe15 	stw	r5,-8(fp)
   41a70:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   41a74:	01000134 	movhi	r4,4
   41a78:	210e9b04 	addi	r4,r4,14956
   41a7c:	e17ffd17 	ldw	r5,-12(fp)
   41a80:	01800044 	movi	r6,1
   41a84:	01c07fc4 	movi	r7,511
   41a88:	00419800 	call	41980 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   41a8c:	01000134 	movhi	r4,4
   41a90:	210e9804 	addi	r4,r4,14944
   41a94:	e17ffe17 	ldw	r5,-8(fp)
   41a98:	000d883a 	mov	r6,zero
   41a9c:	01c07fc4 	movi	r7,511
   41aa0:	00419800 	call	41980 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   41aa4:	01000134 	movhi	r4,4
   41aa8:	210e9e04 	addi	r4,r4,14968
   41aac:	e17fff17 	ldw	r5,-4(fp)
   41ab0:	01800044 	movi	r6,1
   41ab4:	01c07fc4 	movi	r7,511
   41ab8:	00419800 	call	41980 <alt_open_fd>
}  
   41abc:	e037883a 	mov	sp,fp
   41ac0:	dfc00117 	ldw	ra,4(sp)
   41ac4:	df000017 	ldw	fp,0(sp)
   41ac8:	dec00204 	addi	sp,sp,8
   41acc:	f800283a 	ret

00041ad0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   41ad0:	defffa04 	addi	sp,sp,-24
   41ad4:	dfc00515 	stw	ra,20(sp)
   41ad8:	df000415 	stw	fp,16(sp)
   41adc:	dc000315 	stw	r16,12(sp)
   41ae0:	df000304 	addi	fp,sp,12
   41ae4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   41ae8:	e0bffe17 	ldw	r2,-8(fp)
   41aec:	10800217 	ldw	r2,8(r2)
   41af0:	10d00034 	orhi	r3,r2,16384
   41af4:	e0bffe17 	ldw	r2,-8(fp)
   41af8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   41afc:	e03ffd15 	stw	zero,-12(fp)
   41b00:	00002306 	br	41b90 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   41b04:	e13ffd17 	ldw	r4,-12(fp)
   41b08:	04000134 	movhi	r16,4
   41b0c:	840e9804 	addi	r16,r16,14944
   41b10:	01400304 	movi	r5,12
   41b14:	004290c0 	call	4290c <__mulsi3>
   41b18:	1405883a 	add	r2,r2,r16
   41b1c:	10c00017 	ldw	r3,0(r2)
   41b20:	e0bffe17 	ldw	r2,-8(fp)
   41b24:	10800017 	ldw	r2,0(r2)
   41b28:	1880161e 	bne	r3,r2,41b84 <alt_file_locked+0xb4>
   41b2c:	e13ffd17 	ldw	r4,-12(fp)
   41b30:	04000134 	movhi	r16,4
   41b34:	840e9804 	addi	r16,r16,14944
   41b38:	01400304 	movi	r5,12
   41b3c:	004290c0 	call	4290c <__mulsi3>
   41b40:	1405883a 	add	r2,r2,r16
   41b44:	10800204 	addi	r2,r2,8
   41b48:	10800017 	ldw	r2,0(r2)
   41b4c:	1004403a 	cmpge	r2,r2,zero
   41b50:	10000c1e 	bne	r2,zero,41b84 <alt_file_locked+0xb4>
   41b54:	e13ffd17 	ldw	r4,-12(fp)
   41b58:	01400304 	movi	r5,12
   41b5c:	004290c0 	call	4290c <__mulsi3>
   41b60:	1007883a 	mov	r3,r2
   41b64:	00800134 	movhi	r2,4
   41b68:	108e9804 	addi	r2,r2,14944
   41b6c:	1887883a 	add	r3,r3,r2
   41b70:	e0bffe17 	ldw	r2,-8(fp)
   41b74:	18800326 	beq	r3,r2,41b84 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   41b78:	00bffcc4 	movi	r2,-13
   41b7c:	e0bfff15 	stw	r2,-4(fp)
   41b80:	00000a06 	br	41bac <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   41b84:	e0bffd17 	ldw	r2,-12(fp)
   41b88:	10800044 	addi	r2,r2,1
   41b8c:	e0bffd15 	stw	r2,-12(fp)
   41b90:	00800134 	movhi	r2,4
   41b94:	108ffc04 	addi	r2,r2,16368
   41b98:	10800017 	ldw	r2,0(r2)
   41b9c:	1007883a 	mov	r3,r2
   41ba0:	e0bffd17 	ldw	r2,-12(fp)
   41ba4:	18bfd72e 	bgeu	r3,r2,41b04 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   41ba8:	e03fff15 	stw	zero,-4(fp)
   41bac:	e0bfff17 	ldw	r2,-4(fp)
}
   41bb0:	e037883a 	mov	sp,fp
   41bb4:	dfc00217 	ldw	ra,8(sp)
   41bb8:	df000117 	ldw	fp,4(sp)
   41bbc:	dc000017 	ldw	r16,0(sp)
   41bc0:	dec00304 	addi	sp,sp,12
   41bc4:	f800283a 	ret

00041bc8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   41bc8:	defff404 	addi	sp,sp,-48
   41bcc:	dfc00b15 	stw	ra,44(sp)
   41bd0:	df000a15 	stw	fp,40(sp)
   41bd4:	df000a04 	addi	fp,sp,40
   41bd8:	e13ffb15 	stw	r4,-20(fp)
   41bdc:	e17ffc15 	stw	r5,-16(fp)
   41be0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   41be4:	00bfffc4 	movi	r2,-1
   41be8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   41bec:	00bffb44 	movi	r2,-19
   41bf0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   41bf4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   41bf8:	e13ffb17 	ldw	r4,-20(fp)
   41bfc:	01400134 	movhi	r5,4
   41c00:	294ffa04 	addi	r5,r5,16360
   41c04:	0041ff00 	call	41ff0 <alt_find_dev>
   41c08:	e0bffa15 	stw	r2,-24(fp)
   41c0c:	e0bffa17 	ldw	r2,-24(fp)
   41c10:	1004c03a 	cmpne	r2,r2,zero
   41c14:	1000051e 	bne	r2,zero,41c2c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   41c18:	e13ffb17 	ldw	r4,-20(fp)
   41c1c:	00420840 	call	42084 <alt_find_file>
   41c20:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   41c24:	00800044 	movi	r2,1
   41c28:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   41c2c:	e0bffa17 	ldw	r2,-24(fp)
   41c30:	1005003a 	cmpeq	r2,r2,zero
   41c34:	1000311e 	bne	r2,zero,41cfc <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   41c38:	e13ffa17 	ldw	r4,-24(fp)
   41c3c:	00421a40 	call	421a4 <alt_get_fd>
   41c40:	e0bff815 	stw	r2,-32(fp)
   41c44:	e0bff817 	ldw	r2,-32(fp)
   41c48:	1004403a 	cmpge	r2,r2,zero
   41c4c:	1000031e 	bne	r2,zero,41c5c <open+0x94>
    {
      status = index;
   41c50:	e0bff817 	ldw	r2,-32(fp)
   41c54:	e0bff715 	stw	r2,-36(fp)
   41c58:	00002a06 	br	41d04 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   41c5c:	e13ff817 	ldw	r4,-32(fp)
   41c60:	01400304 	movi	r5,12
   41c64:	004290c0 	call	4290c <__mulsi3>
   41c68:	1007883a 	mov	r3,r2
   41c6c:	00800134 	movhi	r2,4
   41c70:	108e9804 	addi	r2,r2,14944
   41c74:	1885883a 	add	r2,r3,r2
   41c78:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   41c7c:	e0fffc17 	ldw	r3,-16(fp)
   41c80:	00900034 	movhi	r2,16384
   41c84:	10bfffc4 	addi	r2,r2,-1
   41c88:	1886703a 	and	r3,r3,r2
   41c8c:	e0bff917 	ldw	r2,-28(fp)
   41c90:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   41c94:	e0bff617 	ldw	r2,-40(fp)
   41c98:	1004c03a 	cmpne	r2,r2,zero
   41c9c:	1000061e 	bne	r2,zero,41cb8 <open+0xf0>
   41ca0:	e13ff917 	ldw	r4,-28(fp)
   41ca4:	0041ad00 	call	41ad0 <alt_file_locked>
   41ca8:	e0bff715 	stw	r2,-36(fp)
   41cac:	e0bff717 	ldw	r2,-36(fp)
   41cb0:	1004803a 	cmplt	r2,r2,zero
   41cb4:	1000131e 	bne	r2,zero,41d04 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   41cb8:	e0bffa17 	ldw	r2,-24(fp)
   41cbc:	10800317 	ldw	r2,12(r2)
   41cc0:	1005003a 	cmpeq	r2,r2,zero
   41cc4:	1000091e 	bne	r2,zero,41cec <open+0x124>
   41cc8:	e0bffa17 	ldw	r2,-24(fp)
   41ccc:	10800317 	ldw	r2,12(r2)
   41cd0:	e13ff917 	ldw	r4,-28(fp)
   41cd4:	e17ffb17 	ldw	r5,-20(fp)
   41cd8:	e1bffc17 	ldw	r6,-16(fp)
   41cdc:	e1fffd17 	ldw	r7,-12(fp)
   41ce0:	103ee83a 	callr	r2
   41ce4:	e0bfff15 	stw	r2,-4(fp)
   41ce8:	00000106 	br	41cf0 <open+0x128>
   41cec:	e03fff15 	stw	zero,-4(fp)
   41cf0:	e0bfff17 	ldw	r2,-4(fp)
   41cf4:	e0bff715 	stw	r2,-36(fp)
   41cf8:	00000206 	br	41d04 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   41cfc:	00bffb44 	movi	r2,-19
   41d00:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   41d04:	e0bff717 	ldw	r2,-36(fp)
   41d08:	1004403a 	cmpge	r2,r2,zero
   41d0c:	1000091e 	bne	r2,zero,41d34 <open+0x16c>
  {
    alt_release_fd (index);  
   41d10:	e13ff817 	ldw	r4,-32(fp)
   41d14:	0041db40 	call	41db4 <alt_release_fd>
    ALT_ERRNO = -status;
   41d18:	0041d540 	call	41d54 <alt_get_errno>
   41d1c:	e0fff717 	ldw	r3,-36(fp)
   41d20:	00c7c83a 	sub	r3,zero,r3
   41d24:	10c00015 	stw	r3,0(r2)
    return -1;
   41d28:	00bfffc4 	movi	r2,-1
   41d2c:	e0bffe15 	stw	r2,-8(fp)
   41d30:	00000206 	br	41d3c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   41d34:	e0bff817 	ldw	r2,-32(fp)
   41d38:	e0bffe15 	stw	r2,-8(fp)
   41d3c:	e0bffe17 	ldw	r2,-8(fp)
}
   41d40:	e037883a 	mov	sp,fp
   41d44:	dfc00117 	ldw	ra,4(sp)
   41d48:	df000017 	ldw	fp,0(sp)
   41d4c:	dec00204 	addi	sp,sp,8
   41d50:	f800283a 	ret

00041d54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   41d54:	defffd04 	addi	sp,sp,-12
   41d58:	dfc00215 	stw	ra,8(sp)
   41d5c:	df000115 	stw	fp,4(sp)
   41d60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   41d64:	00800134 	movhi	r2,4
   41d68:	108ffd04 	addi	r2,r2,16372
   41d6c:	10800017 	ldw	r2,0(r2)
   41d70:	1005003a 	cmpeq	r2,r2,zero
   41d74:	1000061e 	bne	r2,zero,41d90 <alt_get_errno+0x3c>
   41d78:	00800134 	movhi	r2,4
   41d7c:	108ffd04 	addi	r2,r2,16372
   41d80:	10800017 	ldw	r2,0(r2)
   41d84:	103ee83a 	callr	r2
   41d88:	e0bfff15 	stw	r2,-4(fp)
   41d8c:	00000306 	br	41d9c <alt_get_errno+0x48>
   41d90:	00800134 	movhi	r2,4
   41d94:	10959704 	addi	r2,r2,22108
   41d98:	e0bfff15 	stw	r2,-4(fp)
   41d9c:	e0bfff17 	ldw	r2,-4(fp)
}
   41da0:	e037883a 	mov	sp,fp
   41da4:	dfc00117 	ldw	ra,4(sp)
   41da8:	df000017 	ldw	fp,0(sp)
   41dac:	dec00204 	addi	sp,sp,8
   41db0:	f800283a 	ret

00041db4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   41db4:	defffc04 	addi	sp,sp,-16
   41db8:	dfc00315 	stw	ra,12(sp)
   41dbc:	df000215 	stw	fp,8(sp)
   41dc0:	dc000115 	stw	r16,4(sp)
   41dc4:	df000104 	addi	fp,sp,4
   41dc8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   41dcc:	e0bfff17 	ldw	r2,-4(fp)
   41dd0:	108000d0 	cmplti	r2,r2,3
   41dd4:	10000f1e 	bne	r2,zero,41e14 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   41dd8:	e13fff17 	ldw	r4,-4(fp)
   41ddc:	04000134 	movhi	r16,4
   41de0:	840e9804 	addi	r16,r16,14944
   41de4:	01400304 	movi	r5,12
   41de8:	004290c0 	call	4290c <__mulsi3>
   41dec:	1405883a 	add	r2,r2,r16
   41df0:	10800204 	addi	r2,r2,8
   41df4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   41df8:	e13fff17 	ldw	r4,-4(fp)
   41dfc:	04000134 	movhi	r16,4
   41e00:	840e9804 	addi	r16,r16,14944
   41e04:	01400304 	movi	r5,12
   41e08:	004290c0 	call	4290c <__mulsi3>
   41e0c:	1405883a 	add	r2,r2,r16
   41e10:	10000015 	stw	zero,0(r2)
  }
}
   41e14:	e037883a 	mov	sp,fp
   41e18:	dfc00217 	ldw	ra,8(sp)
   41e1c:	df000117 	ldw	fp,4(sp)
   41e20:	dc000017 	ldw	r16,0(sp)
   41e24:	dec00304 	addi	sp,sp,12
   41e28:	f800283a 	ret

00041e2c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   41e2c:	defffa04 	addi	sp,sp,-24
   41e30:	df000515 	stw	fp,20(sp)
   41e34:	df000504 	addi	fp,sp,20
   41e38:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41e3c:	0005303a 	rdctl	r2,status
   41e40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41e44:	e0fffd17 	ldw	r3,-12(fp)
   41e48:	00bfff84 	movi	r2,-2
   41e4c:	1884703a 	and	r2,r3,r2
   41e50:	1001703a 	wrctl	status,r2
  
  return context;
   41e54:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   41e58:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   41e5c:	e0bfff17 	ldw	r2,-4(fp)
   41e60:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   41e64:	e0bffc17 	ldw	r2,-16(fp)
   41e68:	10c00017 	ldw	r3,0(r2)
   41e6c:	e0bffc17 	ldw	r2,-16(fp)
   41e70:	10800117 	ldw	r2,4(r2)
   41e74:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   41e78:	e0bffc17 	ldw	r2,-16(fp)
   41e7c:	10c00117 	ldw	r3,4(r2)
   41e80:	e0bffc17 	ldw	r2,-16(fp)
   41e84:	10800017 	ldw	r2,0(r2)
   41e88:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   41e8c:	e0fffc17 	ldw	r3,-16(fp)
   41e90:	e0bffc17 	ldw	r2,-16(fp)
   41e94:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   41e98:	e0fffc17 	ldw	r3,-16(fp)
   41e9c:	e0bffc17 	ldw	r2,-16(fp)
   41ea0:	18800015 	stw	r2,0(r3)
   41ea4:	e0bffe17 	ldw	r2,-8(fp)
   41ea8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41eac:	e0bffb17 	ldw	r2,-20(fp)
   41eb0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   41eb4:	e037883a 	mov	sp,fp
   41eb8:	df000017 	ldw	fp,0(sp)
   41ebc:	dec00104 	addi	sp,sp,4
   41ec0:	f800283a 	ret

00041ec4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   41ec4:	defffb04 	addi	sp,sp,-20
   41ec8:	dfc00415 	stw	ra,16(sp)
   41ecc:	df000315 	stw	fp,12(sp)
   41ed0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   41ed4:	d0a00717 	ldw	r2,-32740(gp)
   41ed8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   41edc:	d0a59e17 	ldw	r2,-27016(gp)
   41ee0:	10800044 	addi	r2,r2,1
   41ee4:	d0a59e15 	stw	r2,-27016(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   41ee8:	00003106 	br	41fb0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   41eec:	e0bffe17 	ldw	r2,-8(fp)
   41ef0:	10800017 	ldw	r2,0(r2)
   41ef4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   41ef8:	e0bffe17 	ldw	r2,-8(fp)
   41efc:	10800403 	ldbu	r2,16(r2)
   41f00:	10803fcc 	andi	r2,r2,255
   41f04:	1005003a 	cmpeq	r2,r2,zero
   41f08:	1000051e 	bne	r2,zero,41f20 <alt_tick+0x5c>
   41f0c:	d0a59e17 	ldw	r2,-27016(gp)
   41f10:	1004c03a 	cmpne	r2,r2,zero
   41f14:	1000021e 	bne	r2,zero,41f20 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   41f18:	e0bffe17 	ldw	r2,-8(fp)
   41f1c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   41f20:	e0bffe17 	ldw	r2,-8(fp)
   41f24:	10c00217 	ldw	r3,8(r2)
   41f28:	d0a59e17 	ldw	r2,-27016(gp)
   41f2c:	10c01e36 	bltu	r2,r3,41fa8 <alt_tick+0xe4>
   41f30:	e0bffe17 	ldw	r2,-8(fp)
   41f34:	10800403 	ldbu	r2,16(r2)
   41f38:	10803fcc 	andi	r2,r2,255
   41f3c:	1004c03a 	cmpne	r2,r2,zero
   41f40:	1000191e 	bne	r2,zero,41fa8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   41f44:	e0bffe17 	ldw	r2,-8(fp)
   41f48:	10c00317 	ldw	r3,12(r2)
   41f4c:	e0bffe17 	ldw	r2,-8(fp)
   41f50:	11000517 	ldw	r4,20(r2)
   41f54:	183ee83a 	callr	r3
   41f58:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   41f5c:	e0bffd17 	ldw	r2,-12(fp)
   41f60:	1004c03a 	cmpne	r2,r2,zero
   41f64:	1000031e 	bne	r2,zero,41f74 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   41f68:	e13ffe17 	ldw	r4,-8(fp)
   41f6c:	0041e2c0 	call	41e2c <alt_alarm_stop>
   41f70:	00000d06 	br	41fa8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   41f74:	e0bffe17 	ldw	r2,-8(fp)
   41f78:	10c00217 	ldw	r3,8(r2)
   41f7c:	e0bffd17 	ldw	r2,-12(fp)
   41f80:	1887883a 	add	r3,r3,r2
   41f84:	e0bffe17 	ldw	r2,-8(fp)
   41f88:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   41f8c:	e0bffe17 	ldw	r2,-8(fp)
   41f90:	10c00217 	ldw	r3,8(r2)
   41f94:	d0a59e17 	ldw	r2,-27016(gp)
   41f98:	1880032e 	bgeu	r3,r2,41fa8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   41f9c:	e0fffe17 	ldw	r3,-8(fp)
   41fa0:	00800044 	movi	r2,1
   41fa4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   41fa8:	e0bfff17 	ldw	r2,-4(fp)
   41fac:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   41fb0:	d0e00704 	addi	r3,gp,-32740
   41fb4:	e0bffe17 	ldw	r2,-8(fp)
   41fb8:	10ffcc1e 	bne	r2,r3,41eec <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   41fbc:	e037883a 	mov	sp,fp
   41fc0:	dfc00117 	ldw	ra,4(sp)
   41fc4:	df000017 	ldw	fp,0(sp)
   41fc8:	dec00204 	addi	sp,sp,8
   41fcc:	f800283a 	ret

00041fd0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   41fd0:	deffff04 	addi	sp,sp,-4
   41fd4:	df000015 	stw	fp,0(sp)
   41fd8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   41fdc:	000170fa 	wrctl	ienable,zero
}
   41fe0:	e037883a 	mov	sp,fp
   41fe4:	df000017 	ldw	fp,0(sp)
   41fe8:	dec00104 	addi	sp,sp,4
   41fec:	f800283a 	ret

00041ff0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   41ff0:	defff904 	addi	sp,sp,-28
   41ff4:	dfc00615 	stw	ra,24(sp)
   41ff8:	df000515 	stw	fp,20(sp)
   41ffc:	df000504 	addi	fp,sp,20
   42000:	e13ffd15 	stw	r4,-12(fp)
   42004:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   42008:	e0bffe17 	ldw	r2,-8(fp)
   4200c:	10800017 	ldw	r2,0(r2)
   42010:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   42014:	e13ffd17 	ldw	r4,-12(fp)
   42018:	00424640 	call	42464 <strlen>
   4201c:	10800044 	addi	r2,r2,1
   42020:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   42024:	00000d06 	br	4205c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   42028:	e0bffc17 	ldw	r2,-16(fp)
   4202c:	11000217 	ldw	r4,8(r2)
   42030:	e1bffb17 	ldw	r6,-20(fp)
   42034:	e17ffd17 	ldw	r5,-12(fp)
   42038:	00423500 	call	42350 <memcmp>
   4203c:	1004c03a 	cmpne	r2,r2,zero
   42040:	1000031e 	bne	r2,zero,42050 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   42044:	e0bffc17 	ldw	r2,-16(fp)
   42048:	e0bfff15 	stw	r2,-4(fp)
   4204c:	00000706 	br	4206c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   42050:	e0bffc17 	ldw	r2,-16(fp)
   42054:	10800017 	ldw	r2,0(r2)
   42058:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4205c:	e0fffe17 	ldw	r3,-8(fp)
   42060:	e0bffc17 	ldw	r2,-16(fp)
   42064:	10fff01e 	bne	r2,r3,42028 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   42068:	e03fff15 	stw	zero,-4(fp)
   4206c:	e0bfff17 	ldw	r2,-4(fp)
}
   42070:	e037883a 	mov	sp,fp
   42074:	dfc00117 	ldw	ra,4(sp)
   42078:	df000017 	ldw	fp,0(sp)
   4207c:	dec00204 	addi	sp,sp,8
   42080:	f800283a 	ret

00042084 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   42084:	defffa04 	addi	sp,sp,-24
   42088:	dfc00515 	stw	ra,20(sp)
   4208c:	df000415 	stw	fp,16(sp)
   42090:	df000404 	addi	fp,sp,16
   42094:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   42098:	00800134 	movhi	r2,4
   4209c:	108ff804 	addi	r2,r2,16352
   420a0:	10800017 	ldw	r2,0(r2)
   420a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   420a8:	00003306 	br	42178 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   420ac:	e0bffd17 	ldw	r2,-12(fp)
   420b0:	11000217 	ldw	r4,8(r2)
   420b4:	00424640 	call	42464 <strlen>
   420b8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   420bc:	e0bffd17 	ldw	r2,-12(fp)
   420c0:	10c00217 	ldw	r3,8(r2)
   420c4:	e0bffc17 	ldw	r2,-16(fp)
   420c8:	1885883a 	add	r2,r3,r2
   420cc:	10bfffc4 	addi	r2,r2,-1
   420d0:	10800003 	ldbu	r2,0(r2)
   420d4:	10803fcc 	andi	r2,r2,255
   420d8:	1080201c 	xori	r2,r2,128
   420dc:	10bfe004 	addi	r2,r2,-128
   420e0:	10800bd8 	cmpnei	r2,r2,47
   420e4:	1000031e 	bne	r2,zero,420f4 <alt_find_file+0x70>
    {
      len -= 1;
   420e8:	e0bffc17 	ldw	r2,-16(fp)
   420ec:	10bfffc4 	addi	r2,r2,-1
   420f0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   420f4:	e0bffc17 	ldw	r2,-16(fp)
   420f8:	1007883a 	mov	r3,r2
   420fc:	e0bffe17 	ldw	r2,-8(fp)
   42100:	1885883a 	add	r2,r3,r2
   42104:	10800003 	ldbu	r2,0(r2)
   42108:	10803fcc 	andi	r2,r2,255
   4210c:	1080201c 	xori	r2,r2,128
   42110:	10bfe004 	addi	r2,r2,-128
   42114:	10800be0 	cmpeqi	r2,r2,47
   42118:	10000a1e 	bne	r2,zero,42144 <alt_find_file+0xc0>
   4211c:	e0bffc17 	ldw	r2,-16(fp)
   42120:	1007883a 	mov	r3,r2
   42124:	e0bffe17 	ldw	r2,-8(fp)
   42128:	1885883a 	add	r2,r3,r2
   4212c:	10800003 	ldbu	r2,0(r2)
   42130:	10803fcc 	andi	r2,r2,255
   42134:	1080201c 	xori	r2,r2,128
   42138:	10bfe004 	addi	r2,r2,-128
   4213c:	1004c03a 	cmpne	r2,r2,zero
   42140:	10000a1e 	bne	r2,zero,4216c <alt_find_file+0xe8>
   42144:	e0bffd17 	ldw	r2,-12(fp)
   42148:	11000217 	ldw	r4,8(r2)
   4214c:	e1bffc17 	ldw	r6,-16(fp)
   42150:	e17ffe17 	ldw	r5,-8(fp)
   42154:	00423500 	call	42350 <memcmp>
   42158:	1004c03a 	cmpne	r2,r2,zero
   4215c:	1000031e 	bne	r2,zero,4216c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   42160:	e0bffd17 	ldw	r2,-12(fp)
   42164:	e0bfff15 	stw	r2,-4(fp)
   42168:	00000806 	br	4218c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   4216c:	e0bffd17 	ldw	r2,-12(fp)
   42170:	10800017 	ldw	r2,0(r2)
   42174:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   42178:	00c00134 	movhi	r3,4
   4217c:	18cff804 	addi	r3,r3,16352
   42180:	e0bffd17 	ldw	r2,-12(fp)
   42184:	10ffc91e 	bne	r2,r3,420ac <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   42188:	e03fff15 	stw	zero,-4(fp)
   4218c:	e0bfff17 	ldw	r2,-4(fp)
}
   42190:	e037883a 	mov	sp,fp
   42194:	dfc00117 	ldw	ra,4(sp)
   42198:	df000017 	ldw	fp,0(sp)
   4219c:	dec00204 	addi	sp,sp,8
   421a0:	f800283a 	ret

000421a4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   421a4:	defffa04 	addi	sp,sp,-24
   421a8:	dfc00515 	stw	ra,20(sp)
   421ac:	df000415 	stw	fp,16(sp)
   421b0:	dc000315 	stw	r16,12(sp)
   421b4:	df000304 	addi	fp,sp,12
   421b8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   421bc:	00bffa04 	movi	r2,-24
   421c0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   421c4:	e03ffe15 	stw	zero,-8(fp)
   421c8:	00002006 	br	4224c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   421cc:	e13ffe17 	ldw	r4,-8(fp)
   421d0:	04000134 	movhi	r16,4
   421d4:	840e9804 	addi	r16,r16,14944
   421d8:	01400304 	movi	r5,12
   421dc:	004290c0 	call	4290c <__mulsi3>
   421e0:	1405883a 	add	r2,r2,r16
   421e4:	10800017 	ldw	r2,0(r2)
   421e8:	1004c03a 	cmpne	r2,r2,zero
   421ec:	1000141e 	bne	r2,zero,42240 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   421f0:	e13ffe17 	ldw	r4,-8(fp)
   421f4:	04000134 	movhi	r16,4
   421f8:	840e9804 	addi	r16,r16,14944
   421fc:	01400304 	movi	r5,12
   42200:	004290c0 	call	4290c <__mulsi3>
   42204:	1407883a 	add	r3,r2,r16
   42208:	e0bfff17 	ldw	r2,-4(fp)
   4220c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   42210:	00800134 	movhi	r2,4
   42214:	108ffc04 	addi	r2,r2,16368
   42218:	10c00017 	ldw	r3,0(r2)
   4221c:	e0bffe17 	ldw	r2,-8(fp)
   42220:	1880040e 	bge	r3,r2,42234 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   42224:	00c00134 	movhi	r3,4
   42228:	18cffc04 	addi	r3,r3,16368
   4222c:	e0bffe17 	ldw	r2,-8(fp)
   42230:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   42234:	e0bffe17 	ldw	r2,-8(fp)
   42238:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   4223c:	00000606 	br	42258 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   42240:	e0bffe17 	ldw	r2,-8(fp)
   42244:	10800044 	addi	r2,r2,1
   42248:	e0bffe15 	stw	r2,-8(fp)
   4224c:	e0bffe17 	ldw	r2,-8(fp)
   42250:	10800810 	cmplti	r2,r2,32
   42254:	103fdd1e 	bne	r2,zero,421cc <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   42258:	e0bffd17 	ldw	r2,-12(fp)
}
   4225c:	e037883a 	mov	sp,fp
   42260:	dfc00217 	ldw	ra,8(sp)
   42264:	df000117 	ldw	fp,4(sp)
   42268:	dc000017 	ldw	r16,0(sp)
   4226c:	dec00304 	addi	sp,sp,12
   42270:	f800283a 	ret

00042274 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   42274:	defffb04 	addi	sp,sp,-20
   42278:	df000415 	stw	fp,16(sp)
   4227c:	df000404 	addi	fp,sp,16
   42280:	e13ffe15 	stw	r4,-8(fp)
   42284:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   42288:	e0bfff17 	ldw	r2,-4(fp)
   4228c:	10840070 	cmpltui	r2,r2,4097
   42290:	1000021e 	bne	r2,zero,4229c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   42294:	00840004 	movi	r2,4096
   42298:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   4229c:	e0fffe17 	ldw	r3,-8(fp)
   422a0:	e0bfff17 	ldw	r2,-4(fp)
   422a4:	1885883a 	add	r2,r3,r2
   422a8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   422ac:	e0bffe17 	ldw	r2,-8(fp)
   422b0:	e0bffd15 	stw	r2,-12(fp)
   422b4:	00000506 	br	422cc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   422b8:	e0bffd17 	ldw	r2,-12(fp)
   422bc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   422c0:	e0bffd17 	ldw	r2,-12(fp)
   422c4:	10800804 	addi	r2,r2,32
   422c8:	e0bffd15 	stw	r2,-12(fp)
   422cc:	e0fffd17 	ldw	r3,-12(fp)
   422d0:	e0bffc17 	ldw	r2,-16(fp)
   422d4:	18bff836 	bltu	r3,r2,422b8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   422d8:	e0bffe17 	ldw	r2,-8(fp)
   422dc:	108007cc 	andi	r2,r2,31
   422e0:	1005003a 	cmpeq	r2,r2,zero
   422e4:	1000021e 	bne	r2,zero,422f0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   422e8:	e0bffd17 	ldw	r2,-12(fp)
   422ec:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   422f0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   422f4:	e037883a 	mov	sp,fp
   422f8:	df000017 	ldw	fp,0(sp)
   422fc:	dec00104 	addi	sp,sp,4
   42300:	f800283a 	ret

00042304 <atexit>:
   42304:	200b883a 	mov	r5,r4
   42308:	000d883a 	mov	r6,zero
   4230c:	0009883a 	mov	r4,zero
   42310:	000f883a 	mov	r7,zero
   42314:	00424d81 	jmpi	424d8 <__register_exitproc>

00042318 <exit>:
   42318:	defffe04 	addi	sp,sp,-8
   4231c:	000b883a 	mov	r5,zero
   42320:	dc000015 	stw	r16,0(sp)
   42324:	dfc00115 	stw	ra,4(sp)
   42328:	2021883a 	mov	r16,r4
   4232c:	00426100 	call	42610 <__call_exitprocs>
   42330:	00800134 	movhi	r2,4
   42334:	10900204 	addi	r2,r2,16392
   42338:	11000017 	ldw	r4,0(r2)
   4233c:	20800f17 	ldw	r2,60(r4)
   42340:	10000126 	beq	r2,zero,42348 <exit+0x30>
   42344:	103ee83a 	callr	r2
   42348:	8009883a 	mov	r4,r16
   4234c:	00429840 	call	42984 <_exit>

00042350 <memcmp>:
   42350:	00c000c4 	movi	r3,3
   42354:	1980032e 	bgeu	r3,r6,42364 <memcmp+0x14>
   42358:	2144b03a 	or	r2,r4,r5
   4235c:	10c4703a 	and	r2,r2,r3
   42360:	10000f26 	beq	r2,zero,423a0 <memcmp+0x50>
   42364:	31ffffc4 	addi	r7,r6,-1
   42368:	3000061e 	bne	r6,zero,42384 <memcmp+0x34>
   4236c:	00000a06 	br	42398 <memcmp+0x48>
   42370:	39ffffc4 	addi	r7,r7,-1
   42374:	00bfffc4 	movi	r2,-1
   42378:	21000044 	addi	r4,r4,1
   4237c:	29400044 	addi	r5,r5,1
   42380:	38800526 	beq	r7,r2,42398 <memcmp+0x48>
   42384:	20c00003 	ldbu	r3,0(r4)
   42388:	28800003 	ldbu	r2,0(r5)
   4238c:	18bff826 	beq	r3,r2,42370 <memcmp+0x20>
   42390:	1885c83a 	sub	r2,r3,r2
   42394:	f800283a 	ret
   42398:	0005883a 	mov	r2,zero
   4239c:	f800283a 	ret
   423a0:	180f883a 	mov	r7,r3
   423a4:	20c00017 	ldw	r3,0(r4)
   423a8:	28800017 	ldw	r2,0(r5)
   423ac:	18bfed1e 	bne	r3,r2,42364 <memcmp+0x14>
   423b0:	31bfff04 	addi	r6,r6,-4
   423b4:	21000104 	addi	r4,r4,4
   423b8:	29400104 	addi	r5,r5,4
   423bc:	39bff936 	bltu	r7,r6,423a4 <memcmp+0x54>
   423c0:	003fe806 	br	42364 <memcmp+0x14>

000423c4 <memcpy>:
   423c4:	01c003c4 	movi	r7,15
   423c8:	2007883a 	mov	r3,r4
   423cc:	3980032e 	bgeu	r7,r6,423dc <memcpy+0x18>
   423d0:	2904b03a 	or	r2,r5,r4
   423d4:	108000cc 	andi	r2,r2,3
   423d8:	10000926 	beq	r2,zero,42400 <memcpy+0x3c>
   423dc:	30000626 	beq	r6,zero,423f8 <memcpy+0x34>
   423e0:	30cd883a 	add	r6,r6,r3
   423e4:	28800003 	ldbu	r2,0(r5)
   423e8:	29400044 	addi	r5,r5,1
   423ec:	18800005 	stb	r2,0(r3)
   423f0:	18c00044 	addi	r3,r3,1
   423f4:	30fffb1e 	bne	r6,r3,423e4 <memcpy+0x20>
   423f8:	2005883a 	mov	r2,r4
   423fc:	f800283a 	ret
   42400:	3811883a 	mov	r8,r7
   42404:	200f883a 	mov	r7,r4
   42408:	28c00017 	ldw	r3,0(r5)
   4240c:	31bffc04 	addi	r6,r6,-16
   42410:	38c00015 	stw	r3,0(r7)
   42414:	28800117 	ldw	r2,4(r5)
   42418:	38800115 	stw	r2,4(r7)
   4241c:	28c00217 	ldw	r3,8(r5)
   42420:	38c00215 	stw	r3,8(r7)
   42424:	28800317 	ldw	r2,12(r5)
   42428:	29400404 	addi	r5,r5,16
   4242c:	38800315 	stw	r2,12(r7)
   42430:	39c00404 	addi	r7,r7,16
   42434:	41bff436 	bltu	r8,r6,42408 <memcpy+0x44>
   42438:	008000c4 	movi	r2,3
   4243c:	1180072e 	bgeu	r2,r6,4245c <memcpy+0x98>
   42440:	1007883a 	mov	r3,r2
   42444:	28800017 	ldw	r2,0(r5)
   42448:	31bfff04 	addi	r6,r6,-4
   4244c:	29400104 	addi	r5,r5,4
   42450:	38800015 	stw	r2,0(r7)
   42454:	39c00104 	addi	r7,r7,4
   42458:	19bffa36 	bltu	r3,r6,42444 <memcpy+0x80>
   4245c:	3807883a 	mov	r3,r7
   42460:	003fde06 	br	423dc <memcpy+0x18>

00042464 <strlen>:
   42464:	208000cc 	andi	r2,r4,3
   42468:	2011883a 	mov	r8,r4
   4246c:	1000161e 	bne	r2,zero,424c8 <strlen+0x64>
   42470:	20c00017 	ldw	r3,0(r4)
   42474:	017fbff4 	movhi	r5,65279
   42478:	297fbfc4 	addi	r5,r5,-257
   4247c:	01e02074 	movhi	r7,32897
   42480:	39e02004 	addi	r7,r7,-32640
   42484:	1945883a 	add	r2,r3,r5
   42488:	11c4703a 	and	r2,r2,r7
   4248c:	00c6303a 	nor	r3,zero,r3
   42490:	1886703a 	and	r3,r3,r2
   42494:	18000c1e 	bne	r3,zero,424c8 <strlen+0x64>
   42498:	280d883a 	mov	r6,r5
   4249c:	380b883a 	mov	r5,r7
   424a0:	21000104 	addi	r4,r4,4
   424a4:	20800017 	ldw	r2,0(r4)
   424a8:	1187883a 	add	r3,r2,r6
   424ac:	1946703a 	and	r3,r3,r5
   424b0:	0084303a 	nor	r2,zero,r2
   424b4:	10c4703a 	and	r2,r2,r3
   424b8:	103ff926 	beq	r2,zero,424a0 <strlen+0x3c>
   424bc:	20800007 	ldb	r2,0(r4)
   424c0:	10000326 	beq	r2,zero,424d0 <strlen+0x6c>
   424c4:	21000044 	addi	r4,r4,1
   424c8:	20800007 	ldb	r2,0(r4)
   424cc:	103ffd1e 	bne	r2,zero,424c4 <strlen+0x60>
   424d0:	2205c83a 	sub	r2,r4,r8
   424d4:	f800283a 	ret

000424d8 <__register_exitproc>:
   424d8:	defffa04 	addi	sp,sp,-24
   424dc:	00800134 	movhi	r2,4
   424e0:	10900204 	addi	r2,r2,16392
   424e4:	dc000015 	stw	r16,0(sp)
   424e8:	14000017 	ldw	r16,0(r2)
   424ec:	dd000415 	stw	r20,16(sp)
   424f0:	2829883a 	mov	r20,r5
   424f4:	81405217 	ldw	r5,328(r16)
   424f8:	dcc00315 	stw	r19,12(sp)
   424fc:	dc800215 	stw	r18,8(sp)
   42500:	dc400115 	stw	r17,4(sp)
   42504:	dfc00515 	stw	ra,20(sp)
   42508:	2023883a 	mov	r17,r4
   4250c:	3027883a 	mov	r19,r6
   42510:	3825883a 	mov	r18,r7
   42514:	28002526 	beq	r5,zero,425ac <__register_exitproc+0xd4>
   42518:	29000117 	ldw	r4,4(r5)
   4251c:	008007c4 	movi	r2,31
   42520:	11002716 	blt	r2,r4,425c0 <__register_exitproc+0xe8>
   42524:	8800101e 	bne	r17,zero,42568 <__register_exitproc+0x90>
   42528:	2105883a 	add	r2,r4,r4
   4252c:	1085883a 	add	r2,r2,r2
   42530:	20c00044 	addi	r3,r4,1
   42534:	1145883a 	add	r2,r2,r5
   42538:	0009883a 	mov	r4,zero
   4253c:	15000215 	stw	r20,8(r2)
   42540:	28c00115 	stw	r3,4(r5)
   42544:	2005883a 	mov	r2,r4
   42548:	dfc00517 	ldw	ra,20(sp)
   4254c:	dd000417 	ldw	r20,16(sp)
   42550:	dcc00317 	ldw	r19,12(sp)
   42554:	dc800217 	ldw	r18,8(sp)
   42558:	dc400117 	ldw	r17,4(sp)
   4255c:	dc000017 	ldw	r16,0(sp)
   42560:	dec00604 	addi	sp,sp,24
   42564:	f800283a 	ret
   42568:	29802204 	addi	r6,r5,136
   4256c:	00800044 	movi	r2,1
   42570:	110e983a 	sll	r7,r2,r4
   42574:	30c04017 	ldw	r3,256(r6)
   42578:	2105883a 	add	r2,r4,r4
   4257c:	1085883a 	add	r2,r2,r2
   42580:	1185883a 	add	r2,r2,r6
   42584:	19c6b03a 	or	r3,r3,r7
   42588:	14802015 	stw	r18,128(r2)
   4258c:	14c00015 	stw	r19,0(r2)
   42590:	00800084 	movi	r2,2
   42594:	30c04015 	stw	r3,256(r6)
   42598:	88bfe31e 	bne	r17,r2,42528 <__register_exitproc+0x50>
   4259c:	30804117 	ldw	r2,260(r6)
   425a0:	11c4b03a 	or	r2,r2,r7
   425a4:	30804115 	stw	r2,260(r6)
   425a8:	003fdf06 	br	42528 <__register_exitproc+0x50>
   425ac:	00800134 	movhi	r2,4
   425b0:	1095d804 	addi	r2,r2,22368
   425b4:	100b883a 	mov	r5,r2
   425b8:	80805215 	stw	r2,328(r16)
   425bc:	003fd606 	br	42518 <__register_exitproc+0x40>
   425c0:	00800034 	movhi	r2,0
   425c4:	10800004 	addi	r2,r2,0
   425c8:	1000021e 	bne	r2,zero,425d4 <__register_exitproc+0xfc>
   425cc:	013fffc4 	movi	r4,-1
   425d0:	003fdc06 	br	42544 <__register_exitproc+0x6c>
   425d4:	01006404 	movi	r4,400
   425d8:	103ee83a 	callr	r2
   425dc:	1007883a 	mov	r3,r2
   425e0:	103ffa26 	beq	r2,zero,425cc <__register_exitproc+0xf4>
   425e4:	80805217 	ldw	r2,328(r16)
   425e8:	180b883a 	mov	r5,r3
   425ec:	18000115 	stw	zero,4(r3)
   425f0:	18800015 	stw	r2,0(r3)
   425f4:	80c05215 	stw	r3,328(r16)
   425f8:	18006215 	stw	zero,392(r3)
   425fc:	18006315 	stw	zero,396(r3)
   42600:	0009883a 	mov	r4,zero
   42604:	883fc826 	beq	r17,zero,42528 <__register_exitproc+0x50>
   42608:	003fd706 	br	42568 <__register_exitproc+0x90>

0004260c <register_fini>:
   4260c:	f800283a 	ret

00042610 <__call_exitprocs>:
   42610:	00800134 	movhi	r2,4
   42614:	10900204 	addi	r2,r2,16392
   42618:	10800017 	ldw	r2,0(r2)
   4261c:	defff304 	addi	sp,sp,-52
   42620:	df000b15 	stw	fp,44(sp)
   42624:	d8800115 	stw	r2,4(sp)
   42628:	00800034 	movhi	r2,0
   4262c:	10800004 	addi	r2,r2,0
   42630:	1005003a 	cmpeq	r2,r2,zero
   42634:	d8800215 	stw	r2,8(sp)
   42638:	d8800117 	ldw	r2,4(sp)
   4263c:	dd400815 	stw	r21,32(sp)
   42640:	dd000715 	stw	r20,28(sp)
   42644:	10805204 	addi	r2,r2,328
   42648:	dfc00c15 	stw	ra,48(sp)
   4264c:	ddc00a15 	stw	r23,40(sp)
   42650:	dd800915 	stw	r22,36(sp)
   42654:	dcc00615 	stw	r19,24(sp)
   42658:	dc800515 	stw	r18,20(sp)
   4265c:	dc400415 	stw	r17,16(sp)
   42660:	dc000315 	stw	r16,12(sp)
   42664:	282b883a 	mov	r21,r5
   42668:	2039883a 	mov	fp,r4
   4266c:	d8800015 	stw	r2,0(sp)
   42670:	2829003a 	cmpeq	r20,r5,zero
   42674:	d8800117 	ldw	r2,4(sp)
   42678:	14405217 	ldw	r17,328(r2)
   4267c:	88001026 	beq	r17,zero,426c0 <__call_exitprocs+0xb0>
   42680:	ddc00017 	ldw	r23,0(sp)
   42684:	88800117 	ldw	r2,4(r17)
   42688:	8c802204 	addi	r18,r17,136
   4268c:	143fffc4 	addi	r16,r2,-1
   42690:	80000916 	blt	r16,zero,426b8 <__call_exitprocs+0xa8>
   42694:	05bfffc4 	movi	r22,-1
   42698:	a000151e 	bne	r20,zero,426f0 <__call_exitprocs+0xe0>
   4269c:	8409883a 	add	r4,r16,r16
   426a0:	2105883a 	add	r2,r4,r4
   426a4:	1485883a 	add	r2,r2,r18
   426a8:	10c02017 	ldw	r3,128(r2)
   426ac:	a8c01126 	beq	r21,r3,426f4 <__call_exitprocs+0xe4>
   426b0:	843fffc4 	addi	r16,r16,-1
   426b4:	85bff81e 	bne	r16,r22,42698 <__call_exitprocs+0x88>
   426b8:	d8800217 	ldw	r2,8(sp)
   426bc:	10003126 	beq	r2,zero,42784 <__call_exitprocs+0x174>
   426c0:	dfc00c17 	ldw	ra,48(sp)
   426c4:	df000b17 	ldw	fp,44(sp)
   426c8:	ddc00a17 	ldw	r23,40(sp)
   426cc:	dd800917 	ldw	r22,36(sp)
   426d0:	dd400817 	ldw	r21,32(sp)
   426d4:	dd000717 	ldw	r20,28(sp)
   426d8:	dcc00617 	ldw	r19,24(sp)
   426dc:	dc800517 	ldw	r18,20(sp)
   426e0:	dc400417 	ldw	r17,16(sp)
   426e4:	dc000317 	ldw	r16,12(sp)
   426e8:	dec00d04 	addi	sp,sp,52
   426ec:	f800283a 	ret
   426f0:	8409883a 	add	r4,r16,r16
   426f4:	88c00117 	ldw	r3,4(r17)
   426f8:	2105883a 	add	r2,r4,r4
   426fc:	1445883a 	add	r2,r2,r17
   42700:	18ffffc4 	addi	r3,r3,-1
   42704:	11800217 	ldw	r6,8(r2)
   42708:	1c001526 	beq	r3,r16,42760 <__call_exitprocs+0x150>
   4270c:	10000215 	stw	zero,8(r2)
   42710:	303fe726 	beq	r6,zero,426b0 <__call_exitprocs+0xa0>
   42714:	00c00044 	movi	r3,1
   42718:	1c06983a 	sll	r3,r3,r16
   4271c:	90804017 	ldw	r2,256(r18)
   42720:	8cc00117 	ldw	r19,4(r17)
   42724:	1884703a 	and	r2,r3,r2
   42728:	10001426 	beq	r2,zero,4277c <__call_exitprocs+0x16c>
   4272c:	90804117 	ldw	r2,260(r18)
   42730:	1884703a 	and	r2,r3,r2
   42734:	10000c1e 	bne	r2,zero,42768 <__call_exitprocs+0x158>
   42738:	2105883a 	add	r2,r4,r4
   4273c:	1485883a 	add	r2,r2,r18
   42740:	11400017 	ldw	r5,0(r2)
   42744:	e009883a 	mov	r4,fp
   42748:	303ee83a 	callr	r6
   4274c:	88800117 	ldw	r2,4(r17)
   42750:	98bfc81e 	bne	r19,r2,42674 <__call_exitprocs+0x64>
   42754:	b8800017 	ldw	r2,0(r23)
   42758:	147fd526 	beq	r2,r17,426b0 <__call_exitprocs+0xa0>
   4275c:	003fc506 	br	42674 <__call_exitprocs+0x64>
   42760:	8c000115 	stw	r16,4(r17)
   42764:	003fea06 	br	42710 <__call_exitprocs+0x100>
   42768:	2105883a 	add	r2,r4,r4
   4276c:	1485883a 	add	r2,r2,r18
   42770:	11000017 	ldw	r4,0(r2)
   42774:	303ee83a 	callr	r6
   42778:	003ff406 	br	4274c <__call_exitprocs+0x13c>
   4277c:	303ee83a 	callr	r6
   42780:	003ff206 	br	4274c <__call_exitprocs+0x13c>
   42784:	88800117 	ldw	r2,4(r17)
   42788:	1000081e 	bne	r2,zero,427ac <__call_exitprocs+0x19c>
   4278c:	89000017 	ldw	r4,0(r17)
   42790:	20000726 	beq	r4,zero,427b0 <__call_exitprocs+0x1a0>
   42794:	b9000015 	stw	r4,0(r23)
   42798:	8809883a 	mov	r4,r17
   4279c:	00000000 	call	0 <__alt_mem_onchip_mem-0x40000>
   427a0:	bc400017 	ldw	r17,0(r23)
   427a4:	883fb71e 	bne	r17,zero,42684 <__call_exitprocs+0x74>
   427a8:	003fc506 	br	426c0 <__call_exitprocs+0xb0>
   427ac:	89000017 	ldw	r4,0(r17)
   427b0:	882f883a 	mov	r23,r17
   427b4:	2023883a 	mov	r17,r4
   427b8:	883fb21e 	bne	r17,zero,42684 <__call_exitprocs+0x74>
   427bc:	003fc006 	br	426c0 <__call_exitprocs+0xb0>

000427c0 <udivmodsi4>:
   427c0:	29001b2e 	bgeu	r5,r4,42830 <udivmodsi4+0x70>
   427c4:	28001a16 	blt	r5,zero,42830 <udivmodsi4+0x70>
   427c8:	00800044 	movi	r2,1
   427cc:	0007883a 	mov	r3,zero
   427d0:	01c007c4 	movi	r7,31
   427d4:	00000306 	br	427e4 <udivmodsi4+0x24>
   427d8:	19c01326 	beq	r3,r7,42828 <udivmodsi4+0x68>
   427dc:	18c00044 	addi	r3,r3,1
   427e0:	28000416 	blt	r5,zero,427f4 <udivmodsi4+0x34>
   427e4:	294b883a 	add	r5,r5,r5
   427e8:	1085883a 	add	r2,r2,r2
   427ec:	293ffa36 	bltu	r5,r4,427d8 <udivmodsi4+0x18>
   427f0:	10000d26 	beq	r2,zero,42828 <udivmodsi4+0x68>
   427f4:	0007883a 	mov	r3,zero
   427f8:	21400236 	bltu	r4,r5,42804 <udivmodsi4+0x44>
   427fc:	2149c83a 	sub	r4,r4,r5
   42800:	1886b03a 	or	r3,r3,r2
   42804:	1004d07a 	srli	r2,r2,1
   42808:	280ad07a 	srli	r5,r5,1
   4280c:	103ffa1e 	bne	r2,zero,427f8 <udivmodsi4+0x38>
   42810:	30000226 	beq	r6,zero,4281c <udivmodsi4+0x5c>
   42814:	2005883a 	mov	r2,r4
   42818:	f800283a 	ret
   4281c:	1809883a 	mov	r4,r3
   42820:	2005883a 	mov	r2,r4
   42824:	f800283a 	ret
   42828:	0007883a 	mov	r3,zero
   4282c:	003ff806 	br	42810 <udivmodsi4+0x50>
   42830:	00800044 	movi	r2,1
   42834:	0007883a 	mov	r3,zero
   42838:	003fef06 	br	427f8 <udivmodsi4+0x38>

0004283c <__divsi3>:
   4283c:	defffe04 	addi	sp,sp,-8
   42840:	dc000015 	stw	r16,0(sp)
   42844:	dfc00115 	stw	ra,4(sp)
   42848:	0021883a 	mov	r16,zero
   4284c:	20000c16 	blt	r4,zero,42880 <__divsi3+0x44>
   42850:	000d883a 	mov	r6,zero
   42854:	28000e16 	blt	r5,zero,42890 <__divsi3+0x54>
   42858:	00427c00 	call	427c0 <udivmodsi4>
   4285c:	1007883a 	mov	r3,r2
   42860:	8005003a 	cmpeq	r2,r16,zero
   42864:	1000011e 	bne	r2,zero,4286c <__divsi3+0x30>
   42868:	00c7c83a 	sub	r3,zero,r3
   4286c:	1805883a 	mov	r2,r3
   42870:	dfc00117 	ldw	ra,4(sp)
   42874:	dc000017 	ldw	r16,0(sp)
   42878:	dec00204 	addi	sp,sp,8
   4287c:	f800283a 	ret
   42880:	0109c83a 	sub	r4,zero,r4
   42884:	04000044 	movi	r16,1
   42888:	000d883a 	mov	r6,zero
   4288c:	283ff20e 	bge	r5,zero,42858 <__divsi3+0x1c>
   42890:	014bc83a 	sub	r5,zero,r5
   42894:	8021003a 	cmpeq	r16,r16,zero
   42898:	003fef06 	br	42858 <__divsi3+0x1c>

0004289c <__modsi3>:
   4289c:	deffff04 	addi	sp,sp,-4
   428a0:	dfc00015 	stw	ra,0(sp)
   428a4:	01800044 	movi	r6,1
   428a8:	2807883a 	mov	r3,r5
   428ac:	20000416 	blt	r4,zero,428c0 <__modsi3+0x24>
   428b0:	28000c16 	blt	r5,zero,428e4 <__modsi3+0x48>
   428b4:	dfc00017 	ldw	ra,0(sp)
   428b8:	dec00104 	addi	sp,sp,4
   428bc:	00427c01 	jmpi	427c0 <udivmodsi4>
   428c0:	0109c83a 	sub	r4,zero,r4
   428c4:	28000b16 	blt	r5,zero,428f4 <__modsi3+0x58>
   428c8:	180b883a 	mov	r5,r3
   428cc:	01800044 	movi	r6,1
   428d0:	00427c00 	call	427c0 <udivmodsi4>
   428d4:	0085c83a 	sub	r2,zero,r2
   428d8:	dfc00017 	ldw	ra,0(sp)
   428dc:	dec00104 	addi	sp,sp,4
   428e0:	f800283a 	ret
   428e4:	014bc83a 	sub	r5,zero,r5
   428e8:	dfc00017 	ldw	ra,0(sp)
   428ec:	dec00104 	addi	sp,sp,4
   428f0:	00427c01 	jmpi	427c0 <udivmodsi4>
   428f4:	0147c83a 	sub	r3,zero,r5
   428f8:	003ff306 	br	428c8 <__modsi3+0x2c>

000428fc <__udivsi3>:
   428fc:	000d883a 	mov	r6,zero
   42900:	00427c01 	jmpi	427c0 <udivmodsi4>

00042904 <__umodsi3>:
   42904:	01800044 	movi	r6,1
   42908:	00427c01 	jmpi	427c0 <udivmodsi4>

0004290c <__mulsi3>:
   4290c:	20000a26 	beq	r4,zero,42938 <__mulsi3+0x2c>
   42910:	0007883a 	mov	r3,zero
   42914:	2080004c 	andi	r2,r4,1
   42918:	1005003a 	cmpeq	r2,r2,zero
   4291c:	2008d07a 	srli	r4,r4,1
   42920:	1000011e 	bne	r2,zero,42928 <__mulsi3+0x1c>
   42924:	1947883a 	add	r3,r3,r5
   42928:	294b883a 	add	r5,r5,r5
   4292c:	203ff91e 	bne	r4,zero,42914 <__mulsi3+0x8>
   42930:	1805883a 	mov	r2,r3
   42934:	f800283a 	ret
   42938:	0007883a 	mov	r3,zero
   4293c:	1805883a 	mov	r2,r3
   42940:	f800283a 	ret

00042944 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   42944:	defffd04 	addi	sp,sp,-12
   42948:	df000215 	stw	fp,8(sp)
   4294c:	df000204 	addi	fp,sp,8
   42950:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   42954:	e0bfff17 	ldw	r2,-4(fp)
   42958:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4295c:	e0bffe17 	ldw	r2,-8(fp)
   42960:	1005003a 	cmpeq	r2,r2,zero
   42964:	1000021e 	bne	r2,zero,42970 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   42968:	002af070 	cmpltui	zero,zero,43969
   4296c:	00000106 	br	42974 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   42970:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   42974:	e037883a 	mov	sp,fp
   42978:	df000017 	ldw	fp,0(sp)
   4297c:	dec00104 	addi	sp,sp,4
   42980:	f800283a 	ret

00042984 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   42984:	defffd04 	addi	sp,sp,-12
   42988:	dfc00215 	stw	ra,8(sp)
   4298c:	df000115 	stw	fp,4(sp)
   42990:	df000104 	addi	fp,sp,4
   42994:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   42998:	e13fff17 	ldw	r4,-4(fp)
   4299c:	00429440 	call	42944 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   429a0:	003fff06 	br	429a0 <_exit+0x1c>
   429a4:	0004260c 	andi	zero,zero,4248
